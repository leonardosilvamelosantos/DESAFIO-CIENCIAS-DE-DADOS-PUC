
"""Desafio Ciencias de Dados Sociais.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hvsbBEg__Qk5u3nXAj0ImvMegSUakdVy
"""

!git clone https://github.com/leonardosilvamelosantos/DESAFIO-CIENCIAS-DE-DADOS-PUC.git

!pip install panda

from enum import auto
import matplotlib as plt
import panda as pd
import io
import requests
import statistics
import math
import numpy as np
from scipy import stats

caminho_arquivo = "Dados para competição_V1_PauloFernando/MUNIC_IPMporRaca_20230403.xlsx"
IPMporRaca = pd.read_excel("/content/DESAFIO-CIENCIAS-DE-DADOS-PUC/Dados para competição_V1_PauloFernando/MUNIC_IPMporRaca_20230403.xlsx");

IPMporRaca.describe

municipios = pd.read_excel("/content/DESAFIO-CIENCIAS-DE-DADOS-PUC/Dados para competição_V1_PauloFernando/MunicipioBrasil_20230102.xlsx")

municipios.describe

importa = pd.read_csv("/content/DESAFIO-CIENCIAS-DE-DADOS-PUC/Dados para competição_V1_PauloFernando/MUNIC_IPMporSexoRaca_20230403.csv", on_bad_lines='skip')

importa.describe

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)


dados = pd.read_excel('/content/DESAFIO-CIENCIAS-DE-DADOS-PUC/Dados para competição_V1_PauloFernando/MUNIC_IPMporRaca_20230403.xlsx')


X = dados[['qtd_pessoas', 'qtd_pes_pobres', 'qtd_pes_vulneraveis']]
y = dados['qtd_pes_pobres']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


modelo = LinearRegression()
modelo.fit(X_train, y_train)
coeficientes = modelo.coef_


y_pred = modelo.predict(X_test)


mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Erro quadrático médio (MSE): {mse}')
print(f'R-quadrado (R^2): {r2}')

warnings.filterwarnings("ignore", category=FutureWarning)


dados = pd.read_excel('/content/DESAFIO-CIENCIAS-DE-DADOS-PUC/Dados para competição_V1_PauloFernando/MUNIC_IPMporRaca_20230403.xlsx')


X = dados[['qtd_pessoas', 'qtd_pes_pobres', 'qtd_pes_vulneraveis']]
y = dados['qtd_pes_pobres']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


modelo = LinearRegression()
modelo.fit(X_train, y_train)
coeficientes = modelo.coef_


y_pred = modelo.predict(X_test)


mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Erro quadrático médio (MSE): {mse}')
print(f'R-quadrado (R^2): {r2}')

import warnings
warnings.filterwarnings("ignore", category=FutureWarning)
from sklearn.inspection import permutation_importance
from sklearn.ensemble import RandomForestRegressor


modelo = RandomForestRegressor(dados)
modelo = RandomForestRegressor(n_estimators=100)
modelo.fit(X_train, y_train)


resultado = permutation_importance(modelo, X_test, y_test, n_repeats=30, random_state=0)
importancias = resultado.importances_mean

print(f'resultado: {resultado}')
print(f'importancia: {importancias}')

df = pd.DataFrame(IPMporRaca)
df.describe

dados_branco = df[df['raca'] == 1]

dados_preto = df[df['raca'] == 2]

dados_pardo = df[df['raca'] == 4]

dados_amarelo = df[df['raca'] == 3]

dados_indigena = df[df['raca'] == 5]

quantidade_total_pessoas = df['qtd_pessoas'].sum()
print(quantidade_total_pessoas)




dados_branco['incidencia'] = pd.to_numeric(dados_branco['incidencia'], errors='coerce')
dados_pardo['incidencia'] = pd.to_numeric(dados_pardo['incidencia'], errors='coerce')
dados_preto['incidencia'] = pd.to_numeric(dados_preto['incidencia'], errors='coerce')
dados_amarelo['incidencia'] = pd.to_numeric(dados_amarelo['incidencia'], errors='coerce')
dados_indigena['incidencia'] = pd.to_numeric(dados_indigena['incidencia'], errors='coerce')


media_incidencia_branco = dados_branco['incidencia'].mean()
media_incidencia_pardo = dados_pardo['incidencia'].mean()
media_incidencia_negro = dados_preto['incidencia'].mean()
media_incidencia_amarelo = dados_amarelo['incidencia'].mean()
media_incidencia_indigena = dados_indigena['incidencia'].mean()

print("Média de Incidência de Pobreza para o Grupo Branco:", media_incidencia_branco)
print("Média de Incidência de Pobreza para o Grupo Pardo:", media_incidencia_pardo)
print("Média de Incidência de Pobreza para o Grupo Negro:", media_incidencia_negro)
print("Média de Incidência de Pobreza para o Grupo Amarelo:", media_incidencia_amarelo)
print("Média de Incidência de Pobreza para o Grupo Indígena:", media_incidencia_indigena)




dados_branco['intensidade'] = pd.to_numeric(dados_branco['intensidade'], errors='coerce')
dados_pardo['intensidade'] = pd.to_numeric(dados_pardo['intensidade'], errors='coerce')
dados_preto['intensidade'] = pd.to_numeric(dados_preto['intensidade'], errors='coerce')
dados_amarelo['intensidade'] = pd.to_numeric(dados_amarelo['intensidade'], errors='coerce')
dados_indigena['intensidade'] = pd.to_numeric(dados_indigena['intensidade'], errors='coerce')


media_intensidade_branco = dados_branco['intensidade'].mean()
media_intensidade_pardo = dados_pardo['intensidade'].mean()
media_intensidade_preto = dados_preto['intensidade'].mean()
media_intensidade_amarelo = dados_amarelo['intensidade'].mean()
media_intensidade_indigena = dados_indigena['intensidade'].mean()

print("Média de Intensidade para o Grupo Branco:", media_intensidade_branco)
print("Média de Intensidade para o Grupo Pardo:", media_intensidade_pardo)
print("Média de Intensidade para o Grupo Preto:", media_intensidade_preto)
print("Média de Intensidade para o Grupo Amarelo:", media_intensidade_amarelo)
print("Média de Intensidade para o Grupo Indígena:", media_intensidade_indigena)

quantidade_total_pessoas_brancas = int(dados_branco['qtd_pessoas'].sum())
print("A quantidade total de brancos é:", quantidade_total_pessoas_brancas)

quantidade_total_pessoas_pretas = int(dados_preto['qtd_pessoas'].sum())
print("A quantidade total de negros é:", quantidade_total_pessoas_pretas)

quantidade_total_pessoas_pardo = int(dados_pardo['qtd_pessoas'].sum())
print("A quantidade total de pardos é:", quantidade_total_pessoas_pardo)

quantidade_total_pessoas_amarelo = int(dados_amarelo['qtd_pessoas'].sum())
print("A quantidade total de amarelos é:", quantidade_total_pessoas_amarelo)

quantidade_total_pessoas_indigenas = int(dados_indigena['qtd_pessoas'].sum())
print("A quantidade total de indígenas é:", quantidade_total_pessoas_indigenas)

print("A quantidade total de pessoas destas raças= 190755799")




racas = ['Branco', 'Pardo', 'Negro', 'Amarelo', 'Indígena']

incidencia = [35.16155505369646 / 100, 42.21583205563428 / 100, 50.7367495017304 / 100, 37.27749439058363 / 100, 37.28908764426099 / 100]
intensidade = [41.38710798168035 / 100, 42.3711038587893 / 100, 42.06249955191038 / 100, 42.04926620663882 / 100, 43.26596492892076 / 100]



plt.figure(figsize=(10, 6))


cores = ['blue', 'green', 'red', 'yellow', 'brown']


plt.scatter(intensidade, incidencia, c=cores, marker='o', s=100)


for i in range(len(racas)):
    plt.annotate(racas[i], (intensidade[i], incidencia[i]), fontsize=10, ha='right')


plt.xlabel('Intensidade')
plt.ylabel('Incidência de Pobreza')


plt.title('Dispersão de Intensidade vs. Incidência de Pobreza por Grupo Racial')


plt.grid()
plt.show()


quantidade_total_pessoas = 190755799  


porcentagem_brancos = (quantidade_total_pessoas_brancas / quantidade_total_pessoas) * 100
porcentagem_negros = (quantidade_total_pessoas_pretas / quantidade_total_pessoas) * 100
porcentagem_pardos = (quantidade_total_pessoas_pardo / quantidade_total_pessoas) * 100
porcentagem_amarelos = (quantidade_total_pessoas_amarelo / quantidade_total_pessoas) * 100
porcentagem_indigenas = (quantidade_total_pessoas_indigenas / quantidade_total_pessoas) * 100


print("Porcentagem de brancos:", porcentagem_brancos, "%")
print("Porcentagem de negros:", porcentagem_negros, "%")
print("Porcentagem de pardos:", porcentagem_pardos, "%")
print("Porcentagem de amarelos:", porcentagem_amarelos, "%")
print("Porcentagem de indígenas:", porcentagem_indigenas, "%")




porcentagens = [47.50643570211986,0.43065532178133153, 7.52331623742668, 43.41700301336579, 1.1036896445806086, ]
racas = ['Brancos','Indígenas', 'Negros', 'Pardos', 'Amarelos', ]


cores = ['lightcoral', 'lightblue', 'lightgreen', 'lightskyblue', 'lightpink']


plt.figure(figsize=(6, 6))
plt.pie(porcentagens, labels=racas, colors=cores, autopct='%1.1f%%', startangle=140)
plt.title('Porcentagem de Pessoas por Raça')
plt.axis('equal')  


plt.show()


quantidade_total_pessoas_brancas = int(dados_branco['qtd_pessoas'].sum())


quantidade_total_pobres_brancos = int(dados_branco['qtd_pes_pobres'].sum())

print("A quantidade total de brancos é:", quantidade_total_pessoas_brancas)
print("A quantidade total de brancos pobres é:", quantidade_total_pobres_brancos)




pobreza = 15.2
extrema_pobreza = 6.62
nao_pobre = 100 - pobreza


labels = ['Não Pobre', 'Pobreza', 'Extrema Pobreza']


sizes = [nao_pobre, pobreza - extrema_pobreza, extrema_pobreza]


colors = ['lightgreen', 'lightcoral', 'lightskyblue']


explode = (0.1, 0, 0)


plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode)


plt.title('Pobreza na população brasileira')


plt.axis('equal')  
plt.show()


quantidade_total_pessoas_brancas = (dados_branco['qtd_pessoas'].sum())
quantidade_total_pobres_brancos = (dados_branco['qtd_pes_pobres'].sum())


porcentagem_brancos_pobres = (quantidade_total_pobres_brancos / quantidade_total_pessoas_brancas) * 100


porcentagem_brancos_nao_pobres = 100 - porcentagem_brancos_pobres


labels = 'Pessoas Brancas Pobres:\n13.556.547 ', 'Pessoas Brancas Não Pobres:\n77.064.734'


sizes = [porcentagem_brancos_pobres, porcentagem_brancos_nao_pobres]


cores = ['lightcoral', 'lightgreen']


plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, colors=cores, autopct='%1.1f%%', startangle=140)
plt.title('Porcentagem de Pessoas Brancas (90.621.281) Pobres vs. Não Pobres')
plt.axis('equal')  

print("pobres brancos:", quantidade_total_pobres_brancos)
print("total de brancos",quantidade_total_pessoas_brancas)
print("branco rico",quantidade_total_pessoas_brancas-quantidade_total_pobres_brancos)


quantidade_total_pessoas_negras = int(dados_preto['qtd_pessoas'].sum())
quantidade_total_pobres_negras = int(dados_preto['qtd_pes_pobres'].sum())


porcentagem_negras_pobres = (quantidade_total_pobres_negras / quantidade_total_pessoas_negras) * 100


porcentagem_negras_nao_pobres = 100 - porcentagem_negras_pobres


labels = 'Pessoas Negras Pobres: \n3.844.309', 'Pessoas Negras Não Pobres:\n 10.506.853'


sizes = [porcentagem_negras_pobres, porcentagem_negras_nao_pobres]


cores = ['lightcoral', 'lightgreen']


plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, colors=cores, autopct='%1.1f%%', startangle=100)
plt.title('Porcentagem de Pessoas Negras (14.351.162) Pobres vs. Não Pobres')
plt.axis('equal')  

print("pobres negros:", quantidade_total_pobres_negras)
print("total de negros",quantidade_total_pessoas_negras)
print("preto rico",quantidade_total_pessoas_negras-quantidade_total_pobres_negras)

plt.show()


quantidade_total_pessoas_pardas = int(dados_pardo['qtd_pessoas'].sum())
quantidade_total_pobres_pardas = int(dados_pardo['qtd_pes_pobres'].sum())


porcentagem_pardas_pobres = (quantidade_total_pobres_pardas / quantidade_total_pessoas_pardas) * 100


porcentagem_pardas_nao_pobres = 100 - porcentagem_pardas_pobres


plt.figure(figsize=(6, 6))
labels = 'Pessoas Pardas Pobres \n 26.539.118', 'Pessoas Pardas Não Pobres \n 56.281.333'
sizes = [porcentagem_pardas_pobres, porcentagem_pardas_nao_pobres]
plt.pie(sizes, labels=labels, colors=cores, autopct='%1.1f%%', startangle=100)
plt.title('Porcentagem de Pessoas Pardas (82.820.451) Pobres vs. Não Pobres')
plt.axis('equal')
plt.show()

print("pobres pardos:", quantidade_total_pobres_pardas)
print("total de pardos",quantidade_total_pessoas_pardas)
print("pardo rico",quantidade_total_pessoas_pardas-quantidade_total_pobres_pardas)


quantidade_total_pessoas_amarelas = int(dados_amarelo['qtd_pessoas'].sum())
quantidade_total_pobres_amarelas = int(dados_amarelo['qtd_pes_pobres'].sum())


porcentagem_amarelas_pobres = (quantidade_total_pobres_amarelas / quantidade_total_pessoas_amarelas) * 100


porcentagem_amarelas_nao_pobres = 100 - porcentagem_amarelas_pobres

cores = ['lightcoral', 'lightgreen']

plt.figure(figsize=(6, 6))
labels = 'Pessoas Amarelas Pobres \n (434.496)', 'Pessoas Amarelas Não Pobres \n (1.670.856)'
sizes = [porcentagem_amarelas_pobres, porcentagem_amarelas_nao_pobres]
plt.pie(sizes, labels=labels, colors=cores, autopct='%1.1f%%', startangle=100)
plt.title('Porcentagem de Pessoas Amarelas (2.105.352) Pobres vs. Não Pobres')
plt.axis('equal')
plt.show()

print("pobres amarelos:", quantidade_total_pobres_amarelas)
print("total de amarelos",quantidade_total_pessoas_amarelas)
print("amarelos rico",quantidade_total_pessoas_amarelas-quantidade_total_pobres_amarelas)


quantidade_total_pessoas_indigenas = int(dados_indigena['qtd_pessoas'].sum())
quantidade_total_pobres_indigenas = int(dados_indigena['qtd_pes_pobres'].sum())


porcentagem_indigenas_pobres = (quantidade_total_pobres_indigenas / quantidade_total_pessoas_indigenas) * 100


porcentagem_indigenas_nao_pobres = 100 - porcentagem_indigenas_pobres

cores_invertidas = ['lightgreen', 'lightcoral']


plt.figure(figsize=(6, 6))
labels = 'Pessoas Indígenas Pobres\n(542.511)', 'Pessoas Indígenas Não Pobres\n(278.989)'
sizes = [porcentagem_indigenas_pobres, porcentagem_indigenas_nao_pobres]
plt.pie(sizes, labels=labels, colors=cores_invertidas, autopct='%1.1f%%', startangle=180)
plt.title('Porcentagem de Pessoas Indígenas(821.500) Pobres vs. Não Pobres')
plt.axis('equal')
plt.show()


print("pobres indigenas:", quantidade_total_pobres_indigenas)
print("total de indigenas",quantidade_total_pessoas_indigenas)
print("indigenas rico",quantidade_total_pessoas_indigenas-quantidade_total_pobres_indigenas)

IPMporSEXO = pd.read_excel("/content/DESAFIO-CIENCIAS-DE-DADOS-PUC/Dados para competição_V1_PauloFernando/MUNIC_IPMporSexo_20230403.xlsx")

IPMporSEXO.describe

dados = pd.DataFrame(IPMporSEXO)


dados_masculino = dados[dados['sexo'] == 1]
dados_feminino = dados[dados['sexo'] == 2]


total_masculino = dados_masculino['qtd_pessoas'].sum()
total_feminino = dados_feminino['qtd_pessoas'].sum()

total_pobres_masculino = dados_masculino['qtd_pes_pobres'].sum()
total_pobres_feminino = dados_feminino['qtd_pes_pobres'].sum()

total_vulneraveis_masculino = dados_masculino['qtd_pes_vulneraveis'].sum()
total_vulneraveis_feminino = dados_feminino['qtd_pes_vulneraveis'].sum()


proporcao_pobres_masculino = total_pobres_masculino / total_masculino
proporcao_pobres_feminino = total_pobres_feminino / total_feminino

proporcao_vulneraveis_masculino = total_vulneraveis_masculino / total_masculino
proporcao_vulneraveis_feminino = total_vulneraveis_feminino / total_feminino


disparidade_pobreza = proporcao_pobres_feminino - proporcao_pobres_masculino
disparidade_vulnerabilidade = proporcao_vulneraveis_feminino - proporcao_vulneraveis_masculino

print("Disparidade de Pobreza entre Gêneros:", disparidade_pobreza)
print("Disparidade de Vulnerabilidade entre Gêneros:", disparidade_vulnerabilidade)
print("proporão pobres femininos", proporcao_pobres_feminino)
print("proporão pobres masculino", proporcao_pobres_masculino)
print("proporão vulneraveis femininos", proporcao_vulneraveis_feminino)
print("proporão vulneraveis masculino", proporcao_vulneraveis_masculino)


total_masculino = dados_masculino['qtd_pessoas'].sum()
total_feminino = dados_feminino['qtd_pessoas'].sum()
print(total_masculino)
print(total_feminino)


masculino_total = 93406989.99999996
feminino_total = 97348809.00000009


proporcao_pobres_femininos = 0.22419460662816212
proporcao_pobres_masculinos = 0.2472321410526139
proporcao_vulneraveis_femininos = 0.13044216284225604
proporcao_vulneraveis_masculinos = 0.13397538141657275


qtd_pobres_femininos = proporcao_pobres_femininos * feminino_total
qtd_pobres_masculinos = proporcao_pobres_masculinos * masculino_total


qtd_vulneraveis_femininos = proporcao_vulneraveis_femininos * feminino_total
qtd_vulneraveis_masculinos = proporcao_vulneraveis_masculinos * masculino_total


disparidade_pobreza_real = (qtd_pobres_femininos / feminino_total) - (qtd_pobres_masculinos / masculino_total)
disparidade_vulnerabilidade_real = (qtd_vulneraveis_femininos / feminino_total) - (qtd_vulneraveis_masculinos / masculino_total)


print("Disparidade de Pobreza (Real):", disparidade_pobreza_real)
print("Disparidade de Vulnerabilidade (Real):", disparidade_vulnerabilidade_real)
print("Quantidade de Mulheres Pobres:", qtd_pobres_femininos)
print("Quantidade de Homens Pobres:",qtd_pobres_masculinos)
print("Quantidade de Mulheres Vulneraveis:",qtd_vulneraveis_femininos)
print("Quantidade de Homens Vulneraveis:",qtd_vulneraveis_masculinos)


disparidade_pobreza_real = -0.023037534424451778
disparidade_vulnerabilidade_real = -0.00353321857431671
qtd_pobres_femininos = 21825077.939475108
qtd_pobres_masculinos = 23093210.126980085
qtd_vulneraveis_femininos = 12698389.196077693
qtd_vulneraveis_masculinos = 12514237.11222399


disparidade_pobreza_real = -0.023037534424451778
disparidade_vulnerabilidade_real = -0.00353321857431671


disparidade_pobreza_real_percent = disparidade_pobreza_real * 100
disparidade_vulnerabilidade_real_percent = disparidade_vulnerabilidade_real * 100


print("Disparidade de Pobreza (Real):", disparidade_pobreza_real_percent, "%")
print("Disparidade de Vulnerabilidade (Real):", disparidade_vulnerabilidade_real_percent, "%")




qtd_pobres_femininos_int = int(qtd_pobres_femininos)
qtd_pobres_masculinos_int = int(qtd_pobres_masculinos)
qtd_vulneraveis_femininos_int = int(qtd_vulneraveis_femininos)
qtd_vulneraveis_masculinos_int = int(qtd_vulneraveis_masculinos)



print("Quantidade de Mulheres Pobres:", qtd_pobres_femininos_int)
print("Quantidade de Homens Pobres:", qtd_pobres_masculinos_int)
print("Quantidade de Mulheres Vulneráveis:", qtd_vulneraveis_femininos_int)
print("Quantidade de Homens Vulneráveis:", qtd_vulneraveis_masculinos_int)


quantidade_pobres_mulheres = 21825077
quantidade_pobres_homens = 23093210


labels = ['Mulheres', 'Homens']
sizes = [quantidade_pobres_mulheres, quantidade_pobres_homens]
colors = ['lightcoral', 'lightblue']


plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Quantidade de Pessoas Pobres por Gênero')
plt.axis('equal')  


plt.show()

"""**Pessoas em Condições de Pobreza:**

- Pessoas em condições de pobreza são aquelas que não têm acesso adequado a recursos econômicos, sociais e materiais para atender às suas necessidades básicas, como alimentação, moradia, saúde e educação.

- A pobreza é uma condição em que as pessoas têm uma renda tão baixa que não conseguem garantir um padrão de vida adequado. Isso pode ser devido a desemprego, baixos salários, falta de educação ou acesso limitado a serviços essenciais.

- Pessoas em situação de pobreza geralmente enfrentam dificuldades para satisfazer necessidades fundamentais, como alimentação, cuidados de saúde e habitação adequada. A pobreza é frequentemente medida em termos de renda per capita, em que pessoas cuja renda está abaixo de um determinado limiar são consideradas pobres.
"""


quantidade_vulneraveis_mulheres = 12698389
quantidade_vulneraveis_homens = 12514237


labels = ['Mulheres', 'Homens']
sizes = [quantidade_vulneraveis_mulheres, quantidade_vulneraveis_homens]
colors = ['lightcoral', 'lightblue']


plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Quantidade de Pessoas Vulneráveis por Gênero')
plt.axis('equal')  


plt.show()

"""Pessoas em Condições Vulneráveis:

Pessoas em condições vulneráveis referem-se àquelas que estão em risco de cair em situação de pobreza devido a circunstâncias específicas. Isso pode incluir eventos imprevistos, como desastres naturais, perda de emprego, doença ou outros fatores que podem comprometer sua capacidade de sustentar um padrão de vida adequado.

A vulnerabilidade está relacionada à probabilidade de enfrentar dificuldades econômicas ou sociais no futuro devido a fatores que podem afetar negativamente a capacidade de uma pessoa ou família de manter um padrão de vida decente.

Pessoas em condições vulneráveis podem não estar em situação de pobreza atualmente, mas estão em risco de cair nessa condição se ocorrerem eventos ou mudanças nas circunstâncias que as deixem em desvantagem econômica.

Interpretação dos resultados:

1. **Disparidade de Pobreza (Real): -2.30%**
   - Este valor representa a diferença percentual na proporção de pessoas pobres entre homens e mulheres no contexto de seus totais. Um valor negativo indica que a proporção de pessoas pobres é cerca de 2.30% menor entre as mulheres em relação aos homens. Em outras palavras, as mulheres têm uma menor proporção de pessoas pobres em comparação com os homens, de acordo com os dados fornecidos.

2. **Disparidade de Vulnerabilidade (Real): -0.35%**
   - Esse valor representa a diferença percentual na proporção de pessoas vulneráveis entre homens e mulheres no contexto de seus totais. Um valor negativo indica que a proporção de pessoas vulneráveis é cerca de 0.35% menor entre as mulheres em relação aos homens. Isso sugere que, com base nos dados disponíveis, as mulheres têm uma ligeira vantagem em relação à vulnerabilidade, com uma menor proporção de pessoas vulneráveis em comparação com os homens.

Em resumo, esses resultados indicam que, com base nos dados fornecidos, as mulheres parecem estar em uma posição ligeiramente melhor em termos de pobreza e vulnerabilidade em relação aos homens.
"""

quantidade_total_pessoas = dados['qtd_pessoas'].sum()


print("Quantidade Total de Pessoas:", quantidade_total_pessoas)


quantidade_total_pobres = dados['qtd_pes_pobres']. sum()
print("Quantidade Total de Pessoas pobres:", quantidade_total_pobres)


taxa_incidencia_pobreza = (quantidade_total_pobres / quantidade_total_pessoas) * 100


print("Taxa de Incidência da Pobreza:", taxa_incidencia_pobreza, "%")

"""**1. Com base na análise de incidência de pobreza**:

 - No Brasil, em uma população total de 190.755.799 pessoas, aproximadamente 44.9 milhões de pessoas vivem em situação de pobreza. Isso indica uma proporção significativa da população que enfrenta desafios econômicos e sociais, como dificuldades de acesso a recursos e serviços básicos.

**2. Importância:**

 - Essa informação é importante para orientar políticas e intervenções visando a redução da pobreza e melhoria das condições de vida para as pessoas em situação de vulnerabilidade. Portanto, é fundamental que políticas públicas e programas sociais sejam desenvolvidos e implementados para abordar as necessidades das pessoas em situação de pobreza e promover a inclusão econômica e social.
"""


populacao_total = 190755799


taxa_incidencia_pobreza = 23.547534754870114


quantidade_pessoas_pobreza = (taxa_incidencia_pobreza / 100) * populacao_total


labels = ['Em situação de pobreza', 'Não situação de pobreza']
sizes = [quantidade_pessoas_pobreza, populacao_total - quantidade_pessoas_pobreza]
colors = ['lightcoral', 'lightblue']


plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Taxa de Incidência da Pobreza na População')
plt.axis('equal')  


plt.show()


racas = ['Branca', 'Preta', 'Parda', 'Amarela', 'Indígena']
quantidades = [
    int(dados_branco['qtd_pessoas'].sum()),
    int(dados_preto['qtd_pessoas'].sum()),
    int(dados_pardo['qtd_pessoas'].sum()),
    int(dados_amarelo['qtd_pessoas'].sum()),
    int(dados_indigena['qtd_pessoas'].sum())
]


plt.figure(figsize=(10, 6))
plt.bar(racas, quantidades, color=['lightcoral', 'lightblue', 'lightgreen', 'lightskyblue', 'lightpink'])
plt.title('Quantidade Total de Pessoas por Raça')
plt.xlabel('Raça')
plt.ylabel('Quantidade Total de Pessoas')


plt.show()


racas = ['Branca', 'Preta', 'Parda', 'Amarela', 'Indígena']
quantidades = [
    int(dados_branco['qtd_pessoas'].sum()),
    int(dados_preto['qtd_pessoas'].sum()),
    int(dados_pardo['qtd_pessoas'].sum()),
    int(dados_amarelo['qtd_pessoas'].sum()),
    int(dados_indigena['qtd_pessoas'].sum())
]
quantidades_pobres = [
    int(dados_branco['qtd_pes_pobres'].sum()),
    int(dados_preto['qtd_pes_pobres'].sum()),
    int(dados_pardo['qtd_pes_pobres'].sum()),
    int(dados_amarelo['qtd_pes_pobres'].sum()),
    int(dados_indigena['qtd_pes_pobres'].sum())
]


largura = 0.35


x = range(len(racas))


plt.figure(figsize=(12, 6))
plt.bar(x, quantidades, largura, label='Total de Pessoas', color='lightblue')
plt.bar([i + largura for i in x], quantidades_pobres, largura, label='Total de Pessoas Pobres', color='lightcoral')
plt.xticks([i + largura / 2 for i in x], racas)
plt.title('Quantidade Total de Pessoas e Pessoas Pobres por Raça')
plt.xlabel('Raça')
plt.ylabel('Quantidade')
plt.legend()


for i in range(len(x)):
    plt.text(x[i], quantidades[i] + 100000, str(quantidades[i]), ha='center')
    plt.text(x[i] + largura, quantidades_pobres[i] + 100000, str(quantidades_pobres[i]), ha='center')


plt.show()


porcentagem_pobres_negros = (quantidade_total_pobres_negras / quantidade_total_pessoas_negras) * 100
porcentagem_pobres_brancos = (quantidade_total_pobres_brancos / quantidade_total_pessoas_brancas) * 100


diferenca_percentual = porcentagem_pobres_negros - porcentagem_pobres_brancos


print("Porcentagem de pobres entre negros: {:.2f}%".format(porcentagem_pobres_negros))
print("Porcentagem de pobres entre brancos: {:.2f}%".format(porcentagem_pobres_brancos))
print("Diferença percentual: {:.2f}%".format(diferenca_percentual))


porcentagem_pobres_negros = 26.79
porcentagem_pobres_brancos = 14.96
diferenca_percentual = 11.83


categorias = ['Porcentagem de pobres entre negros', 'Porcentagem de pobres entre brancos', 'Diferença percentual']


valores = [porcentagem_pobres_negros, porcentagem_pobres_brancos, diferenca_percentual]


cores = ['lightcoral', 'lightblue', 'lightgreen']


plt.figure(figsize=(8, 6))
plt.bar(categorias, valores, color=cores)
plt.title('Comparação de Porcentagens de Pobres entre Negros e Brancos')
plt.ylabel('Porcentagem')
plt.xticks(rotation=15)


for i, v in enumerate(valores):
    plt.text(i, v, "{:.2f}%".format(v), ha='center', va='bottom')


plt.show()

"""**Disparidade na Pobreza:**
 A porcentagem de pobres entre negros (26.79%) é significativamente maior do que a porcentagem entre brancos (14.96%). Isso indica uma disparidade na distribuição da pobreza entre esses dois grupos.

**Desigualdade Econômica:**
 A diferença percentual de 11.83% entre as porcentagens é um indicador da desigualdade econômica entre negros e brancos em relação à pobreza. Essa diferença destaca que uma proporção maior de negros está em situação de pobreza em comparação com brancos.

**Desafios Socioeconômicos:**
 Essas estatísticas sugerem que negros podem enfrentar desafios socioeconômicos adicionais em comparação com brancos, o que pode incluir acesso limitado a oportunidades educacionais, empregos bem remunerados e outros recursos que podem ajudar a reduzir a pobreza.

**Necessidade de Políticas Públicas:**
 A disparidade na pobreza destaca a importância de políticas públicas que abordem as desigualdades econômicas e sociais entre grupos raciais. Essas políticas podem incluir ações afirmativas, acesso igualitário à educação e oportunidades de emprego, e programas de assistência social.

**Conscientização e Advocacia:**
 Essas estatísticas também podem servir como um ponto de partida para a conscientização e a advocacia por medidas que reduzam a disparidade na pobreza entre grupos raciais, promovendo equidade e justiça social.
"""

porcentagem_pobres_pardos = (quantidade_total_pobres_pardas / quantidade_total_pessoas_pardas) * 100
porcentagem_pobres_brancos = (quantidade_total_pobres_brancos / quantidade_total_pessoas_brancas) * 100


diferenca_percentual = porcentagem_pobres_pardos - porcentagem_pobres_brancos


print("Porcentagem de pobres entre pardos: {:.2f}%".format(porcentagem_pobres_pardos))
print("Porcentagem de pobres entre brancos: {:.2f}%".format(porcentagem_pobres_brancos))
print("Diferença percentual: {:.2f}%".format(diferenca_percentual))


porcentagem_pobres_pardos = 32.04
porcentagem_pobres_brancos = 14.96
diferenca_percentual = 17.08


categorias = ['Pardos', 'Brancos', 'Diferença Percentual']


valores = [porcentagem_pobres_pardos, porcentagem_pobres_brancos, diferenca_percentual]


cores = ['lightcoral', 'lightblue', 'lightgreen']


plt.figure(figsize=(8, 6))
plt.bar(categorias, valores, color=cores)
plt.title('Comparação de Porcentagens de Pobres entre Pardos e Brancos')
plt.ylabel('Porcentagem')
plt.xticks(rotation=15)


for i, v in enumerate(valores):
    plt.text(i, v, "{:.2f}%".format(v), ha='center', va='bottom')


plt.show()


porcentagem_pobres_negros = 26.79
porcentagem_pobres_pardos = 32.04


categorias = ['Negros', 'Pardos']


valores = [porcentagem_pobres_negros, porcentagem_pobres_pardos]


cores = ['lightcoral', 'lightblue']


plt.figure(figsize=(8, 6))
plt.bar(categorias, valores, color=cores)
plt.title('Comparação de Porcentagens de Pobres entre Negros e Pardos')
plt.ylabel('Porcentagem de Pobres')
plt.xticks(rotation=15)


for i, v in enumerate(valores):
    plt.text(i, v, "{:.2f}%".format(v), ha='center', va='bottom')


plt.show()

df = pd.DataFrame(IPMporRaca)
dados_regiao_11 = df[df['cod_mun'].astype(str).str.startswith('11')]

dados_regiao_11.describe

dados_regiao_12 = df[df['cod_mun'].astype(str).str.startswith('12')]
dados_regiao_12.describe



dados_regiao_11 = df[df['cod_mun'].astype(str).str.startswith('11')]
dados_regiao_12 = df[df['cod_mun'].astype(str).str.startswith('12')]
dados_regiao_13 = df[df['cod_mun'].astype(str).str.startswith('13')]
dados_regiao_14 = df[df['cod_mun'].astype(str).str.startswith('14')]

dados_regiao_15 = df[df['cod_mun'].astype(str).str.startswith('15')]
dados_regiao_16 = df[df['cod_mun'].astype(str).str.startswith('16')]
dados_regiao_17 = df[df['cod_mun'].astype(str).str.startswith('17')]


dados_regiao_21 = df[df['cod_mun'].astype(str).str.startswith('21')]
dados_regiao_22 = df[df['cod_mun'].astype(str).str.startswith('22')]
dados_regiao_23 = df[df['cod_mun'].astype(str).str.startswith('23')]
dados_regiao_24 = df[df['cod_mun'].astype(str).str.startswith('24')]
dados_regiao_25 = df[df['cod_mun'].astype(str).str.startswith('25')]
dados_regiao_26 = df[df['cod_mun'].astype(str).str.startswith('26')]
dados_regiao_27 = df[df['cod_mun'].astype(str).str.startswith('27')]
dados_regiao_28 = df[df['cod_mun'].astype(str).str.startswith('28')]
dados_regiao_29 = df[df['cod_mun'].astype(str).str.startswith('29')]

dados_regiao_31 = df[df['cod_mun'].astype(str).str.startswith('31')]
dados_regiao_32 = df[df['cod_mun'].astype(str).str.startswith('32')]
dados_regiao_33 = df[df['cod_mun'].astype(str).str.startswith('33')]
dados_regiao_34 = df[df['cod_mun'].astype(str).str.startswith('34')]
dados_regiao_35 = df[df['cod_mun'].astype(str).str.startswith('35')]

dados_regiao_41 = df[df['cod_mun'].astype(str).str.startswith('41')]
dados_regiao_42 = df[df['cod_mun'].astype(str).str.startswith('42')]
dados_regiao_43 = df[df['cod_mun'].astype(str).str.startswith('43')]

dados_regiao_50 = df[df['cod_mun'].astype(str).str.startswith('50')]
dados_regiao_51 = df[df['cod_mun'].astype(str).str.startswith('51')]
dados_regiao_52 = df[df['cod_mun'].astype(str).str.startswith('52')]
dados_regiao_53 = df[df['cod_mun'].astype(str).str.startswith('53')]



dados_regiao_31.describe



nomes_regioes = {
    '11': 'Rondônia (RO)',
    '12': 'Acre (AC)',
    '13': 'Amazonas (AM)',
    '14': 'Roraima (RR)',
    '15': 'Pará (PA)',
    '16': 'Amapá (AP)',
    '17': 'Tocantins (TO)',
    '21': 'Maranhão (MA)',
    '22': 'Piauí (PI)',
    '23': 'Ceará (CE)',
    '24': 'Rio Grande do Norte (RN)',
    '25': 'Paraíba (PB)',
    '26': 'Pernambuco (PE)',
    '27': 'Alagoas (AL)',
    '28': 'Sergipe (SE)',
    '29': 'Bahia (BA)',
    '31': 'Minas Gerais (MG)',
    '32': 'Espírito Santo (ES)',
    '33': 'Rio de Janeiro (RJ)',
    '35': 'São Paulo (SP)',
    '41': 'Paraná (PR)',
    '42': 'Santa Catarina (SC)',
    '43': 'Rio Grande do Sul (RS)',
    '50': 'Mato Grosso do Sul (MS)',
    '51': 'Mato Grosso (MT)',
    '52': 'Goiás (GO)',
    '53': 'Distrito Federal (DF)'
}

dados_regiao_31.to_excel('/content/DESAFIO-CIENCIAS-DE-DADOS-PUC/Dados para competição_V1_PauloFernando/regiao_31.xlsx', index=False)

regioes = {
    "Norte": {
        "Rondônia (RO)": dados_regiao_11,
        "Acre (AC)": dados_regiao_12,
        "Amazonas (AM)": dados_regiao_13,
        "Roraima (RR)": dados_regiao_14,
        "Pará (PA)": dados_regiao_15,
        "Amapá (AP)": dados_regiao_16,
        "Tocantins (TO)": dados_regiao_17
    },
    "Nordeste": {
        "Maranhão (MA)": dados_regiao_21,
        "Piauí (PI)": dados_regiao_22,
        "Ceará (CE)": dados_regiao_23,
        "Rio Grande do Norte (RN)": dados_regiao_24,
        "Paraíba (PB)": dados_regiao_25,
        "Pernambuco (PE)": dados_regiao_26,
        "Alagoas (AL)": dados_regiao_27,
        "Sergipe (SE)": dados_regiao_28,
        "Bahia (BA)": dados_regiao_29
    },
    "Sudeste": {
        "Minas Gerais (MG)": dados_regiao_31,
        "Espírito Santo (ES)": dados_regiao_32,
        "Rio de Janeiro (RJ)": dados_regiao_33,
        "São Paulo (SP)": dados_regiao_35
    },
    "Sul": {
        "Paraná (PR)": dados_regiao_41,
        "Santa Catarina (SC)": dados_regiao_42,
        "Rio Grande do Sul (RS)": dados_regiao_43
    },
    "Centro-Oeste": {
        "Mato Grosso do Sul (MS)": dados_regiao_50,
        "Mato Grosso (MT)": dados_regiao_51,
        "Goiás (GO)": dados_regiao_52,
        "Distrito Federal (DF)": dados_regiao_53
    }
}


regiao_sudeste = regioes["Sudeste"]


dados_sp = regiao_sudeste["São Paulo (SP)"]
dados_rj = regiao_sudeste["Rio de Janeiro (RJ)"]
dados_mg = regiao_sudeste["Minas Gerais (MG)"]
dados_es = regiao_sudeste["Espírito Santo (ES)"]

dados_sp.describe

dados_sp.describe




 
pd.options.mode.chained_assignment = None


estados = {
    "São Paulo": dados_sp,
    "Minas Gerais": dados_mg,
    "Rio de Janeiro": dados_rj,
    "Espírito Santo": dados_es,
    "Maranhão": dados_ma,
    "Piauí": dados_pi,
    "Ceará": dados_ce,
    "Rio Grande do Norte": dados_rn,
    "Paraíba": dados_pb,
    "Pernambuco": dados_pe,
    "Alagoas": dados_al,
    "Sergipe": dados_se,
    "Bahia": dados_ba,
    "Paraná": dados_pr,
    "Santa Catarina": dados_sc,
    "Rio Grande do Sul": dados_rs,
    "Goiás": dados_go,
    "Mato Grosso": dados_mt,
    "Mato Grosso do Sul": dados_ms,
    "Rondônia": dados_ro,
    "Acre": dados_ac,
    "Amazonas": dados_am,
    "Roraima": dados_rr,
    "Pará": dados_pa,
    "Amapá": dados_ap,
    "Tocantins": dados_to
}


medias_incidencia = []
medias_intensidade = []


for estado, df in estados.items():
    
    df = df.iloc[1:]

    
    df["intensidade"] = df["intensidade"].astype(str).str.replace(',', '.').str.extract(r'(\d+\.\d+)').astype(float)

    
    df["intensidade"].fillna(0, inplace=True)

    
    media_incidencia_estado = df["incidencia"].mean()
    media_intensidade_estado = df["intensidade"].mean()

    medias_incidencia.append(media_incidencia_estado)
    medias_intensidade.append(media_intensidade_estado)


medias_df = pd.DataFrame({
    "Estado": estados.keys(),
    "Média Incidência": medias_incidencia,
    "Média Intensidade": medias_intensidade
})


print(medias_df)


estados = [
    {"Estado": "SP", "Média Incidência": 15.435198, "Média Intensidade": 39.410227},
    {"Estado": "MG", "Média Incidência": 32.539463, "Média Intensidade": 40.994388},
    {"Estado": "RJ", "Média Incidência": 21.942853, "Média Intensidade": 40.481283},
    {"Estado": "ES", "Média Incidência": 33.215171, "Média Intensidade": 41.278681},
    {"Estado": "MA", "Média Incidência": 66.721186, "Média Intensidade": 43.915779},
    {"Estado": "PI", "Média Incidência": 58.907250, "Média Intensidade": 41.472416},
    {"Estado": "CE", "Média Incidência": 50.280753, "Média Intensidade": 40.253278},
    {"Estado": "RN", "Média Incidência": 40.847219, "Média Intensidade": 39.545382},
    {"Estado": "PB", "Média Incidência": 51.020365, "Média Intensidade": 41.384521},
    {"Estado": "PE", "Média Incidência": 44.350502, "Média Intensidade": 40.283963},
    {"Estado": "AL", "Média Incidência": 54.422438, "Média Intensidade": 42.281307},
    {"Estado": "SE", "Média Incidência": 43.258914, "Média Intensidade": 41.457539},
    {"Estado": "BA", "Média Incidência": 46.467897, "Média Intensidade": 40.619271},
    {"Estado": "PR", "Média Incidência": 35.096862, "Média Intensidade": 37.870357},
    {"Estado": "SC", "Média Incidência": 37.871089, "Média Intensidade": 36.519400},
    {"Estado": "RS", "Média Incidência": 37.811229, "Média Intensidade": 36.508917},
    {"Estado": "GO", "Média Incidência": 28.212420, "Média Intensidade": 35.737676},
    {"Estado": "MT", "Média Incidência": 43.428050, "Média Intensidade": 39.622030},
    {"Estado": "MS", "Média Incidência": 36.588095, "Média Intensidade": 39.002033},
    {"Estado": "RO", "Média Incidência": 66.259398, "Média Intensidade": 44.127524},
    {"Estado": "AC", "Média Incidência": 74.054231, "Média Intensidade": 48.115623},
    {"Estado": "AM", "Média Incidência": 77.352212, "Média Intensidade": 49.888271},
    {"Estado": "RR", "Média Incidência": 58.315504, "Média Intensidade": 44.797140},
    {"Estado": "PA", "Média Incidência": 72.211061, "Média Intensidade": 46.810464},
    {"Estado": "AP", "Média Incidência": 61.815573, "Média Intensidade": 44.983945},
    {"Estado": "TO", "Média Incidência": 46.233164, "Média Intensidade": 39.670549},
]


incidencia = [estado["Média Incidência"] for estado in estados]
intensidade = [estado["Média Intensidade"] for estado in estados]


nomes_estados = [estado["Estado"] for estado in estados]


plt.figure(figsize=(10, 6))
plt.scatter(incidencia, intensidade)


for i, nome_estado in enumerate(nomes_estados):
    plt.annotate(nome_estado, (incidencia[i], intensidade[i]), textcoords="offset points", xytext=(0, 10), ha='center')


plt.xlabel('Média Incidência')
plt.ylabel('Média Intensidade')


plt.title('Gráfico de Dispersão - Incidência vs. Intensidade por Estado')


plt.grid()
plt.show()


estados = [
    {"Estado": "SP", "Média Incidência": 15.435198 / 100, "Média Intensidade": 39.410227 / 100},
    {"Estado": "MG", "Média Incidência": 32.539463 / 100, "Média Intensidade": 40.994388 / 100},
    {"Estado": "RJ", "Média Incidência": 21.942853 / 100, "Média Intensidade": 40.481283 / 100},
    {"Estado": "ES", "Média Incidência": 33.215171 / 100, "Média Intensidade": 41.278681 / 100},
    {"Estado": "MA", "Média Incidência": 66.721186 / 100, "Média Intensidade": 43.915779 / 100},
    {"Estado": "PI", "Média Incidência": 58.907250 / 100, "Média Intensidade": 41.472416 / 100},
    {"Estado": "CE", "Média Incidência": 50.280753 / 100, "Média Intensidade": 40.253278 / 100},
    {"Estado": "RN", "Média Incidência": 40.847219 / 100, "Média Intensidade": 39.545382 / 100},
    {"Estado": "PB", "Média Incidência": 51.020365 / 100, "Média Intensidade": 41.384521 / 100},
    {"Estado": "PE", "Média Incidência": 44.350502 / 100, "Média Intensidade": 40.283963 / 100},
    {"Estado": "AL", "Média Incidência": 54.422438 / 100, "Média Intensidade": 42.281307 / 100},
    {"Estado": "SE", "Média Incidência": 43.258914 / 100, "Média Intensidade": 41.457539 / 100},
    {"Estado": "BA", "Média Incidência": 46.467897 / 100, "Média Intensidade": 40.619271 / 100},
    {"Estado": "PR", "Média Incidência": 35.096862 / 100, "Média Intensidade": 37.870357 / 100},
    {"Estado": "SC", "Média Incidência": 37.871089 / 100, "Média Intensidade": 36.519400 / 100},
    {"Estado": "RS", "Média Incidência": 37.811229 / 100, "Média Intensidade": 36.508917 / 100},
    {"Estado": "GO", "Média Incidência": 28.212420 / 100, "Média Intensidade": 35.737676 / 100},
    {"Estado": "MT", "Média Incidência": 43.428050 / 100, "Média Intensidade": 39.622030 / 100},
    {"Estado": "MS", "Média Incidência": 36.588095 / 100, "Média Intensidade": 39.002033 / 100},
    {"Estado": "RO", "Média Incidência": 66.259398 / 100, "Média Intensidade": 44.127524 / 100},
    {"Estado": "AC", "Média Incidência": 74.054231 / 100, "Média Intensidade": 48.115623 / 100},
    {"Estado": "AM", "Média Incidência": 77.352212 / 100, "Média Intensidade": 49.888271 / 100},
    {"Estado": "RR", "Média Incidência": 58.315504 / 100, "Média Intensidade": 44.797140 / 100},
    {"Estado": "PA", "Média Incidência": 72.211061 / 100, "Média Intensidade": 46.810464 / 100},
    {"Estado": "AP", "Média Incidência": 61.815573 / 100, "Média Intensidade": 44.983945 / 100},
    {"Estado": "TO", "Média Incidência": 46.233164 / 100, "Média Intensidade": 39.670549 / 100},
]


incidencia = [estado["Média Incidência"] for estado in estados]
intensidade = [estado["Média Intensidade"] for estado in estados]


nomes_estados = [estado["Estado"] for estado in estados]


plt.figure(figsize=(10, 6))
plt.scatter(incidencia, intensidade)


for i, nome_estado in enumerate(nomes_estados):
    plt.annotate(nome_estado, (incidencia[i], intensidade[i]), textcoords="offset points", xytext=(0, 10), ha='center')



plt.xlabel('Média Incidência (0-1)')
plt.ylabel('Média Intensidade (0-1)')


plt.title('Gráfico de Dispersão - Incidência vs. Intensidade por Estado')


plt.grid()
plt.show()

regiao_norte = regioes["Norte"]

dados_am = regiao_norte["Amazonas (AM)"]
dados_pa = regiao_norte["Pará (PA)"]
dados_rr = regiao_norte["Roraima (RR)"]
dados_ro = regiao_norte["Rondônia (RO)"]
dados_ac = regiao_norte["Acre (AC)"]
dados_ap = regiao_norte["Amapá (AP)"]
dados_to = regiao_norte["Tocantins (TO)"]



regiao_nordeste = regioes["Nordeste"]

dados_ma = regiao_nordeste["Maranhão (MA)"]
dados_pi = regiao_nordeste["Piauí (PI)"]
dados_ce = regiao_nordeste["Ceará (CE)"]
dados_rn = regiao_nordeste["Rio Grande do Norte (RN)"]
dados_pb = regiao_nordeste["Paraíba (PB)"]
dados_pe = regiao_nordeste["Pernambuco (PE)"]
dados_al = regiao_nordeste["Alagoas (AL)"]
dados_se = regiao_nordeste["Sergipe (SE)"]
dados_ba = regiao_nordeste["Bahia (BA)"]



regiao_sul = regioes["Sul"]

dados_pr = regiao_sul["Paraná (PR)"]
dados_sc = regiao_sul["Santa Catarina (SC)"]
dados_rs = regiao_sul["Rio Grande do Sul (RS)"]



regiao_centro_oeste = regioes["Centro-Oeste"]

dados_ms = regiao_centro_oeste["Mato Grosso do Sul (MS)"]
dados_mt = regiao_centro_oeste["Mato Grosso (MT)"]
dados_go = regiao_centro_oeste["Goiás (GO)"]
dados_df = regiao_centro_oeste["Distrito Federal (DF)"]




colunas = dados.columns
print(colunas)





regioes = [regiao_norte, regiao_nordeste, regiao_sudeste, regiao_sul, regiao_centro_oeste]


titulos = ['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste']


coluna1 = 'qtd_pes_pobres'
coluna2 = 'qtd_0a11_pobres'


for regiao, titulo in zip(regioes, titulos):
    for estado in regiao.keys():
        estado_dataframe = regiao[estado]
        
        if coluna1 in estado_dataframe.columns and coluna2 in estado_dataframe.columns:
            
            plt.scatter(estado_dataframe[coluna1], estado_dataframe[coluna2])
            plt.xlabel(coluna1)
            plt.ylabel(coluna2)
            plt.title(f'{titulo} - {estado}')
            plt.show()

            
            correlacao = estado_dataframe[coluna1].corr(estado_dataframe[coluna2])
            print(f'Correlação em {titulo} - {estado}: {correlacao:.2f}')




regioes = [regiao_norte, regiao_nordeste, regiao_sudeste, regiao_sul, regiao_centro_oeste]


titulos = ['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste']


nome_da_coluna = 'qtd_pes_pobres'


for regiao, titulo in zip(regioes, titulos):
    for estado in regiao.keys():
        
        estado_dataframe = regiao[estado]
        estado_dataframe[nome_da_coluna].plot(kind='bar')
        plt.xticks([])
        plt.xlabel(estado )
        plt.ylabel('Pessoas Pobres')
        plt.title(f'{titulo} - {estado}')
        plt.show()





soma_qtd_pessoas_sp = regiao_sudeste['São Paulo (SP)']['qtd_pessoas'].sum()
soma_qtd_pessoas_rj = regiao_sudeste['Rio de Janeiro (RJ)']['qtd_pessoas'].sum()
soma_qtd_pessoas_mg = regiao_sudeste['Minas Gerais (MG)']['qtd_pessoas'].sum()
soma_qtd_pessoas_es = regiao_sudeste['Espírito Santo (ES)']['qtd_pessoas'].sum()


soma_qtd_pessoas_regiao_sudeste = soma_qtd_pessoas_sp + soma_qtd_pessoas_rj + soma_qtd_pessoas_mg + soma_qtd_pessoas_es

print(f"Total de pessoas na região Sudeste: {soma_qtd_pessoas_regiao_sudeste}")





soma_qtd_pes_pobres_sp = regiao_sudeste['São Paulo (SP)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_rj = regiao_sudeste['Rio de Janeiro (RJ)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_mg = regiao_sudeste['Minas Gerais (MG)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_es = regiao_sudeste['Espírito Santo (ES)']['qtd_pes_pobres'].sum()


soma_qtd_pes_pobres_regiao_sudeste = soma_qtd_pes_pobres_sp + soma_qtd_pes_pobres_rj + soma_qtd_pes_pobres_mg + soma_qtd_pes_pobres_es

print(f"Total de pessoas pobres na região Sudeste: {soma_qtd_pes_pobres_regiao_sudeste}")


total_pessoas = 80364410
total_pessoas_pobres = 8295708


labels = ['Pessoas não pobres', 'Pessoas pobres']


sizes = [total_pessoas - total_pessoas_pobres, total_pessoas_pobres]


colors = ['green, red']


explode = (0.1, 0)


plt.figure(figsize=(8, 5))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode)
plt.title("Distribuição de Pessoas na Região Sudeste")


plt.axis('equal')
plt.show()




estados_nordeste = ['Pernambuco (PE)', 'Bahia (BA)', 'Ceará (CE)', 'Alagoas (AL)', 'Maranhão (MA)', 'Paraíba (PB)', 'Piauí (PI)', 'Rio Grande do Norte (RN)', 'Sergipe (SE)']


def soma_coluna_estado(dataframe, estado, coluna):
    return dataframe[estado][coluna].sum()


def soma_coluna_regiao(dataframe, estados, coluna):
    total_regiao = sum(soma_coluna_estado(dataframe, estado, coluna) for estado in estados)
    return total_regiao


total_pessoas_regiao_nordeste = soma_coluna_regiao(regiao_nordeste, estados_nordeste, 'qtd_pessoas')

print(f"Total de pessoas na região Nordeste: {total_pessoas_regiao_nordeste}")


total_pessoas_pobres_regiao_nordeste = soma_coluna_regiao(regiao_nordeste, estados_nordeste, 'qtd_pes_pobres')

print(f"Total de pessoas pobres na região Nordeste: {total_pessoas_pobres_regiao_nordeste}")




total_pessoas_nordeste = 53081949.999999985
total_pessoas_pobres_nordeste = 20559194.891400725


labels = ['Pessoas não pobres', 'Pessoas pobres']


sizes = [total_pessoas_nordeste - total_pessoas_pobres_nordeste, total_pessoas_pobres_nordeste]


colors = ['lightcoral', 'lightblue']


explode = (0.1, 0)


plt.figure(figsize=(8, 5))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=200, explode=explode)
plt.title("Distribuição de Pessoas na Região Nordeste")


plt.axis('equal')
plt.show()


soma_qtd_pessoas_rs = regiao_sul['Rio Grande do Sul (RS)']['qtd_pessoas'].sum()
soma_qtd_pessoas_sc = regiao_sul['Santa Catarina (SC)']['qtd_pessoas'].sum()
soma_qtd_pessoas_pr = regiao_sul['Paraná (PR)']['qtd_pessoas'].sum()


soma_qtd_pessoas_regiao_sul = soma_qtd_pessoas_rs + soma_qtd_pessoas_sc + soma_qtd_pessoas_pr


soma_qtd_pes_pobres_rs = regiao_sul['Rio Grande do Sul (RS)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_sc = regiao_sul['Santa Catarina (SC)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_pr = regiao_sul['Paraná (PR)']['qtd_pes_pobres'].sum()


soma_qtd_pes_pobres_regiao_sul = soma_qtd_pes_pobres_rs + soma_qtd_pes_pobres_sc + soma_qtd_pes_pobres_pr

print(f"Total de pessoas na região Sul: {soma_qtd_pessoas_regiao_sul}")
print(f"Total de pessoas pobres na região Sul: {soma_qtd_pes_pobres_regiao_sul}")




total_pessoas_sul = soma_qtd_pessoas_regiao_sul
total_pessoas_pobres_sul = soma_qtd_pes_pobres_regiao_sul


labels = ['Pessoas não pobres', 'Pessoas pobres']


sizes = [total_pessoas_sul - total_pessoas_pobres_sul, total_pessoas_pobres_sul]


colors = ['lightcoral', 'lightblue']


explode = (0.1, 0)


plt.figure(figsize=(8, 5))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode)
plt.title("Distribuição de Pessoas na Região Sul")


plt.axis('equal')
plt.show()


soma_qtd_pessoas_am = regiao_norte['Amazonas (AM)']['qtd_pessoas'].sum()
soma_qtd_pessoas_pa = regiao_norte['Pará (PA)']['qtd_pessoas'].sum()
soma_qtd_pessoas_rr = regiao_norte['Roraima (RR)']['qtd_pessoas'].sum()
soma_qtd_pessoas_ap = regiao_norte['Amapá (AP)']['qtd_pessoas'].sum()
soma_qtd_pessoas_to = regiao_norte['Tocantins (TO)']['qtd_pessoas'].sum()
soma_qtd_pessoas_ro = regiao_norte['Rondônia (RO)']['qtd_pessoas'].sum()
soma_qtd_pessoas_ac = regiao_norte['Acre (AC)']['qtd_pessoas'].sum()

soma_qtd_pessoas_regiao_norte = (
    soma_qtd_pessoas_am + soma_qtd_pessoas_pa + soma_qtd_pessoas_rr +
    soma_qtd_pessoas_ap + soma_qtd_pessoas_to + soma_qtd_pessoas_ro +
    soma_qtd_pessoas_ac
)

soma_qtd_pes_pobres_am = regiao_norte['Amazonas (AM)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_pa = regiao_norte['Pará (PA)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_rr = regiao_norte['Roraima (RR)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_ap = regiao_norte['Amapá (AP)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_to = regiao_norte['Tocantins (TO)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_ro = regiao_norte['Rondônia (RO)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_ac = regiao_norte['Acre (AC)']['qtd_pes_pobres'].sum()

soma_qtd_pes_pobres_regiao_norte = (
    soma_qtd_pes_pobres_am + soma_qtd_pes_pobres_pa + soma_qtd_pes_pobres_rr +
    soma_qtd_pes_pobres_ap + soma_qtd_pes_pobres_to + soma_qtd_pes_pobres_ro +
    soma_qtd_pes_pobres_ac
)


total_pessoas_norte = soma_qtd_pessoas_regiao_norte
total_pessoas_pobres_norte = soma_qtd_pes_pobres_regiao_norte

labels = ['Pessoas não pobres', 'Pessoas pobres']
sizes = [total_pessoas_norte - total_pessoas_pobres_norte, total_pessoas_pobres_norte]
colors = ['lightcoral', 'lightblue']
explode = (0.1, 0)

plt.figure(figsize=(8, 5))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode)
plt.title("Distribuição de Pessoas na Região Norte")

plt.axis('equal')
plt.show()





soma_qtd_pessoas_go = regiao_centro_oeste['Goiás (GO)']['qtd_pessoas'].sum()
soma_qtd_pessoas_mt = regiao_centro_oeste['Mato Grosso (MT)']['qtd_pessoas'].sum()
soma_qtd_pessoas_ms = regiao_centro_oeste['Mato Grosso do Sul (MS)']['qtd_pessoas'].sum()
soma_qtd_pessoas_df = regiao_centro_oeste['Distrito Federal (DF)']['qtd_pessoas'].sum()


soma_qtd_pessoas_regiao_centro_oeste = soma_qtd_pessoas_go + soma_qtd_pessoas_mt + soma_qtd_pessoas_ms + soma_qtd_pessoas_df


soma_qtd_pes_pobres_go = regiao_centro_oeste['Goiás (GO)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_mt = regiao_centro_oeste['Mato Grosso (MT)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_ms = regiao_centro_oeste['Mato Grosso do Sul (MS)']['qtd_pes_pobres'].sum()
soma_qtd_pes_pobres_df = regiao_centro_oeste['Distrito Federal (DF)']['qtd_pes_pobres'].sum()


soma_qtd_pes_pobres_regiao_centro_oeste = soma_qtd_pes_pobres_go + soma_qtd_pes_pobres_mt + soma_qtd_pes_pobres_ms + soma_qtd_pes_pobres_df

print(f"Total de pessoas na região Centro-Oeste: {soma_qtd_pessoas_regiao_centro_oeste}")
print(f"Total de pessoas pobres na região Centro-Oeste: {soma_qtd_pes_pobres_regiao_centro_oeste}")




total_pessoas_centro_oeste = soma_qtd_pessoas_regiao_centro_oeste
total_pessoas_pobres_centro_oeste = soma_qtd_pes_pobres_regiao_centro_oeste


labels_centro_oeste = ['Pessoas não pobres', 'Pessoas pobres']


sizes_centro_oeste = [total_pessoas_centro_oeste - total_pessoas_pobres_centro_oeste, total_pessoas_pobres_centro_oeste]


colors_centro_oeste = ['lightcoral', 'lightblue']


explode_centro_oeste = (0.1, 0)


plt.figure(figsize=(8, 5))
plt.pie(sizes_centro_oeste, labels=labels_centro_oeste, colors=colors_centro_oeste, autopct='%1.1f%%', startangle=140, explode=explode_centro_oeste)
plt.title("Distribuição de Pessoas na Região Centro-Oeste")


plt.axis('equal')
plt.show()


pesos_variaveis = {
    "contr_E1": 8.33,
    "contr_E2": 8.33,
    "contr_E3": 8.33,
    "contr_S1": 6.25,
    "contr_S2": 6.25,
    "contr_S3": 6.25,
    "contr_S4": 6.25,
    "contr_T1": 8.33,
    "contr_T2": 8.33,
    "contr_T3": 8.33,
    "contr_P1": 6.25,
    "contr_P2": 6.25,
    "contr_P3": 6.25,
    "contr_P4": 6.25,
}


variavel = "contr_S2"
peso = pesos_variaveis.get(variavel, 0.0)  

print(f"Peso da variável {variavel}: {peso}")


regioes = {
    "Sudeste": regiao_sudeste,  
    
}


dados_sp = regioes["Sudeste"]["São Paulo (SP)"]
dados_rj = regioes["Sudeste"]["Rio de Janeiro (RJ)"]
dados_mg = regioes["Sudeste"]["Minas Gerais (MG)"]
dados_es = regioes["Sudeste"]["Espírito Santo (ES)"]


dados_sp = dados_sp[pd.to_numeric(dados_sp['contr_E3'], errors='coerce').notnull()]
dados_sp = dados_sp[pd.to_numeric(dados_sp['qtd_pes_pobres'], errors='coerce').notnull()]

dados_rj = dados_rj[pd.to_numeric(dados_rj['contr_E3'], errors='coerce').notnull()]
dados_rj = dados_rj[pd.to_numeric(dados_rj['qtd_pes_pobres'], errors='coerce').notnull()]

dados_mg = dados_mg[pd.to_numeric(dados_mg['contr_E3'], errors='coerce').notnull()]
dados_mg = dados_mg[pd.to_numeric(dados_mg['qtd_pes_pobres'], errors='coerce').notnull()]

dados_es = dados_es[pd.to_numeric(dados_es['contr_E3'], errors='coerce').notnull()]
dados_es = dados_es[pd.to_numeric(dados_es['qtd_pes_pobres'], errors='coerce').notnull()]


dados_sp['contr_E3'].fillna(0, inplace=True)
dados_sp['qtd_pes_pobres'].fillna(0, inplace=True)

dados_rj['contr_E3'].fillna(0, inplace=True)
dados_rj['qtd_pes_pobres'].fillna(0, inplace=True)

dados_mg['contr_E3'].fillna(0, inplace=True)
dados_mg['qtd_pes_pobres'].fillna(0, inplace=True)

dados_es['contr_E3'].fillna(0, inplace=True)
dados_es['qtd_pes_pobres'].fillna(0, inplace=True)


plt.figure(figsize=(10, 6))

plt.subplot(221)
plt.scatter(dados_sp['contr_E3'], dados_sp['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_E3')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: São Paulo (SP)')

plt.subplot(222)
plt.scatter(dados_rj['contr_E3'], dados_rj['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_E3')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Rio de Janeiro (RJ)')

plt.subplot(223)
plt.scatter(dados_mg['contr_E3'], dados_mg['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_E3')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Minas Gerais (MG)')

plt.subplot(224)
plt.scatter(dados_es['contr_E3'], dados_es['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_E3')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Espírito Santo (ES)')


plt.tight_layout()


plt.show()


regioes = {
    "Sudeste": regiao_sudeste,  
    
}


dados_sp = regioes["Sudeste"]["São Paulo (SP)"]
dados_rj = regioes["Sudeste"]["Rio de Janeiro (RJ)"]
dados_mg = regioes["Sudeste"]["Minas Gerais (MG)"]
dados_es = regioes["Sudeste"]["Espírito Santo (ES)"]


dados_sp = dados_sp[pd.to_numeric(dados_sp['contr_S3'], errors='coerce').notnull()]
dados_sp = dados_sp[pd.to_numeric(dados_sp['qtd_pes_pobres'], errors='coerce').notnull()]

dados_rj = dados_rj[pd.to_numeric(dados_rj['contr_S3'], errors='coerce').notnull()]
dados_rj = dados_rj[pd.to_numeric(dados_rj['qtd_pes_pobres'], errors='coerce').notnull()]

dados_mg = dados_mg[pd.to_numeric(dados_mg['contr_S3'], errors='coerce').notnull()]
dados_mg = dados_mg[pd.to_numeric(dados_mg['qtd_pes_pobres'], errors='coerce').notnull()]

dados_es = dados_es[pd.to_numeric(dados_es['contr_S3'], errors='coerce').notnull()]
dados_es = dados_es[pd.to_numeric(dados_es['qtd_pes_pobres'], errors='coerce').notnull()]


dados_sp['contr_S3'].fillna(0, inplace=True)
dados_sp['qtd_pes_pobres'].fillna(0, inplace=True)

dados_rj['contr_S3'].fillna(0, inplace=True)
dados_rj['qtd_pes_pobres'].fillna(0, inplace=True)

dados_mg['contr_S3'].fillna(0, inplace=True)
dados_mg['qtd_pes_pobres'].fillna(0, inplace=True)

dados_es['contr_S3'].fillna(0, inplace=True)
dados_es['qtd_pes_pobres'].fillna(0, inplace=True)


plt.figure(figsize=(10, 6))

plt.subplot(221)
plt.scatter(dados_sp['contr_S3'], dados_sp['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: São Paulo (SP)')

plt.subplot(222)
plt.scatter(dados_rj['contr_S3'], dados_rj['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Rio de Janeiro (RJ)')

plt.subplot(223)
plt.scatter(dados_mg['contr_S3'], dados_mg['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Minas Gerais (MG)')

plt.subplot(224)
plt.scatter(dados_es['contr_S3'], dados_es['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Espírito Santo (ES)')


plt.tight_layout()


plt.show()

regioes = {
    "Sudeste": regiao_sudeste,

}


dados_sp = regioes["Sudeste"]["São Paulo (SP)"]
dados_rj = regioes["Sudeste"]["Rio de Janeiro (RJ)"]
dados_mg = regioes["Sudeste"]["Minas Gerais (MG)"]
dados_es = regioes["Sudeste"]["Espírito Santo (ES)"]


dados_sp['contr_S3'] = pd.to_numeric(dados_sp['contr_S3'], errors='coerce') / 6.25
dados_rj['contr_S3'] = pd.to_numeric(dados_rj['contr_S3'], errors='coerce') / 6.25
dados_mg['contr_S3'] = pd.to_numeric(dados_mg['contr_S3'], errors='coerce') / 6.25
dados_es['contr_S3'] = pd.to_numeric(dados_es['contr_S3'], errors='coerce') / 6.25


dados_sp = dados_sp[pd.to_numeric(dados_sp['contr_S3'], errors='coerce').notnull()]
dados_sp = dados_sp[pd.to_numeric(dados_sp['qtd_pes_pobres'], errors='coerce').notnull()]

dados_rj = dados_rj[pd.to_numeric(dados_rj['contr_S3'], errors='coerce').notnull()]
dados_rj = dados_rj[pd.to_numeric(dados_rj['qtd_pes_pobres'], errors='coerce').notnull()]

dados_mg = dados_mg[pd.to_numeric(dados_mg['contr_S3'], errors='coerce').notnull()]
dados_mg = dados_mg[pd.to_numeric(dados_mg['qtd_pes_pobres'], errors='coerce').notnull()]

dados_es = dados_es[pd.to_numeric(dados_es['contr_S3'], errors='coerce').notnull()]
dados_es = dados_es[pd.to_numeric(dados_es['qtd_pes_pobres'], errors='coerce').notnull()]


dados_sp['contr_S3'].fillna(0, inplace=True)
dados_sp['qtd_pes_pobres'].fillna(0, inplace=True)

dados_rj['contr_S3'].fillna(0, inplace=True)
dados_rj['qtd_pes_pobres'].fillna(0, inplace=True)

dados_mg['contr_S3'].fillna(0, inplace=True)
dados_mg['qtd_pes_pobres'].fillna(0, inplace=True)

dados_es['contr_S3'].fillna(0, inplace=True)
dados_es['qtd_pes_pobres'].fillna(0, inplace=True)


plt.figure(figsize=(10, 6))

plt.subplot(221)
plt.scatter(dados_sp['contr_S3'], dados_sp['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: São Paulo (SP)')

plt.subplot(222)
plt.scatter(dados_rj['contr_S3'], dados_rj['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Rio de Janeiro (RJ)')

plt.subplot(223)
plt.scatter(dados_mg['contr_S3'], dados_mg['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Minas Gerais (MG)')

plt.subplot(224)
plt.scatter(dados_es['contr_S3'], dados_es['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Gráfico de Dispersão: Espírito Santo (ES)')


plt.tight_layout()
plt.show()

"""O gráfico de dispersão mostra uma relação positiva entre a quantidade de pessoas pobres e a proporção de domicílios em que o esgoto do banheiro ou sanitário não é lançado em rede geral. Em outras palavras, quanto maior a proporção de domicílios sem saneamento básico, maior o número de pessoas pobres.

Essa relação pode ser explicada por uma série de fatores, incluindo:

- A falta de saneamento básico pode levar a doenças, o que pode reduzir a capacidade de trabalho das pessoas e, consequentemente, sua renda.

- A falta de saneamento básico pode também dificultar a frequência escolar das crianças, o que pode limitar suas oportunidades de emprego e renda no futuro.

- A falta de saneamento básico pode também reduzir a qualidade de vida das pessoas, o que pode levar a um estado de pobreza.

A análise dos gráficos de dispersão de cada estado da região Sudeste confirma essa relação. Em todos os estados, a proporção de domicílios sem saneamento básico é maior nos municípios com maior número de pessoas pobres.

Os gráficos também mostram que a relação entre a quantidade de pessoas pobres e a proporção de domicílios sem saneamento básico é mais forte em São Paulo e Rio de Janeiro, os estados mais populosos da região. Isso pode ser explicado pelo fato de que esses estados também apresentam as maiores desigualdades sociais.

Em conclusão, o gráfico de dispersão mostra que a falta de saneamento básico é um importante fator de pobreza na região Sudeste do Brasil. Medidas para melhorar o saneamento básico na região podem contribuir para a redução da pobreza.
*
Aqui estão algumas recomendações para melhorar o saneamento básico na região Sudeste:
*

- Investir na construção de redes de esgoto e tratamento de água.

- Fornecer incentivos financeiros para a construção de banheiros adequados.

- Promover campanhas de conscientização sobre a importância do saneamento básico.

"""

regioes = {
    "Nordeste": regiao_nordeste,
}


dados_ma = regioes["Nordeste"]["Maranhão (MA)"]
dados_pi = regioes["Nordeste"]["Piauí (PI)"]
dados_ce = regioes["Nordeste"]["Ceará (CE)"]
dados_rn = regioes["Nordeste"]["Rio Grande do Norte (RN)"]
dados_pb = regioes["Nordeste"]["Paraíba (PB)"]
dados_pe = regioes["Nordeste"]["Pernambuco (PE)"]
dados_al = regioes["Nordeste"]["Alagoas (AL)"]
dados_se = regioes["Nordeste"]["Sergipe (SE)"]
dados_ba = regioes["Nordeste"]["Bahia (BA)"]


dados_ma['contr_S3'] = pd.to_numeric(dados_ma['contr_S3'], errors='coerce')
dados_pi['contr_S3'] = pd.to_numeric(dados_pi['contr_S3'], errors='coerce')
dados_ce['contr_S3'] = pd.to_numeric(dados_ce['contr_S3'], errors='coerce')
dados_rn['contr_S3'] = pd.to_numeric(dados_rn['contr_S3'], errors='coerce')
dados_pb['contr_S3'] = pd.to_numeric(dados_pb['contr_S3'], errors='coerce')
dados_pe['contr_S3'] = pd.to_numeric(dados_pe['contr_S3'], errors='coerce') / 6.25
dados_al['contr_S3'] = pd.to_numeric(dados_al['contr_S3'], errors='coerce') / 6.25
dados_se['contr_S3'] = pd.to_numeric(dados_se['contr_S3'], errors='coerce') / 6.25
dados_ba['contr_S3'] = pd.to_numeric(dados_ba['contr_S3'], errors='coerce') / 6.25


dados_ma = dados_ma[pd.to_numeric(dados_ma['contr_S3'], errors='coerce').notnull()]
dados_ma = dados_ma[pd.to_numeric(dados_ma['qtd_pes_pobres'], errors='coerce').notnull()]

dados_pi = dados_pi[pd.to_numeric(dados_pi['contr_S3'], errors='coerce').notnull()]
dados_pi = dados_pi[pd.to_numeric(dados_pi['qtd_pes_pobres'], errors='coerce').notnull()]

dados_ce = dados_ce[pd.to_numeric(dados_ce['contr_S3'], errors='coerce').notnull()]
dados_ce = dados_ce[pd.to_numeric(dados_ce['qtd_pes_pobres'], errors='coerce').notnull()]

dados_rn = dados_rn[pd.to_numeric(dados_rn['contr_S3'], errors='coerce').notnull()]
dados_rn = dados_rn[pd.to_numeric(dados_rn['qtd_pes_pobres'], errors='coerce').notnull()]

dados_pb = dados_pb[pd.to_numeric(dados_pb['contr_S3'], errors='coerce').notnull()]
dados_pb = dados_pb[pd.to_numeric(dados_pb['qtd_pes_pobres'], errors='coerce').notnull()]

dados_pe = dados_pe[pd.to_numeric(dados_pe['contr_S3'], errors='coerce').notnull()]
dados_pe = dados_pe[pd.to_numeric(dados_pe['qtd_pes_pobres'], errors='coerce').notnull()]

dados_al = dados_al[pd.to_numeric(dados_al['contr_S3'], errors='coerce').notnull()]
dados_al = dados_al[pd.to_numeric(dados_al['qtd_pes_pobres'], errors='coerce').notnull()]

dados_se = dados_se[pd.to_numeric(dados_se['contr_S3'], errors='coerce').notnull()]
dados_se = dados_se[pd.to_numeric(dados_se['qtd_pes_pobres'], errors='coerce').notnull()]

dados_ba = dados_ba[pd.to_numeric(dados_ba['contr_S3'], errors='coerce').notnull()]
dados_ba = dados_ba[pd.to_numeric(dados_ba['qtd_pes_pobres'], errors='coerce').notnull()]


plt.figure(figsize=(14, 8))


plt.subplot(331)
plt.scatter(dados_ma['contr_S3'], dados_ma['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Maranhão (MA)')


plt.subplot(332)
plt.scatter(dados_pi['contr_S3'], dados_pi['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Piauí (PI)')


plt.subplot(333)
plt.scatter(dados_ce['contr_S3'], dados_ce['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Ceará (CE)')


plt.subplot(334)
plt.scatter(dados_rn['contr_S3'], dados_rn['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Rio Grande do Norte (RN)')


plt.subplot(335)
plt.scatter(dados_pb['contr_S3'], dados_pb['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Paraíba (PB)')


plt.subplot(336)
plt.scatter(dados_pe['contr_S3'], dados_pe['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Pernambuco (PE)')


plt.subplot(337)
plt.scatter(dados_al['contr_S3'], dados_al['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Alagoas (AL)')


plt.subplot(338)
plt.scatter(dados_se['contr_S3'], dados_se['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Sergipe (SE)')


plt.subplot(339)
plt.scatter(dados_ba['contr_S3'], dados_ba['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Bahia (BA)')


plt.tight_layout()


plt.show()



regioes = {
    "Nordeste": regiao_nordeste,
}

estados = ["Maranhão (MA)", "Piauí (PI)", "Ceará (CE)", "Rio Grande do Norte (RN)", "Paraíba (PB)", "Pernambuco (PE)", "Alagoas (AL)", "Sergipe (SE)", "Bahia (BA)"]


plt.figure(figsize=(14, 8))
for i, estado in enumerate(estados, start=1):
    dados_estado = regioes["Nordeste"][estado]

    
    dados_estado['contr_S3'] = pd.to_numeric(dados_estado['contr_S3'], errors='coerce') / 6.25

    
    dados_estado = dados_estado[pd.to_numeric(dados_estado['contr_S3'], errors='coerce').notnull()]
    dados_estado = dados_estado[pd.to_numeric(dados_estado['qtd_pes_pobres'], errors='coerce').notnull()]

    
    plt.subplot(3, 3, i)
    plt.scatter(dados_estado['contr_S3'], dados_estado['qtd_pes_pobres'], s=100, alpha=0.5)
    plt.xlabel('contr_S3 (com peso)')
    plt.ylabel('qtd_pes_pobres')
    plt.title(estado)


plt.tight_layout()


plt.show()

"""Em comparação com os gráficos da região Sudeste do Brasil, as conclusões são as seguintes:

- A relação entre a quantidade de pessoas pobres e a proporção de domicílios sem saneamento básico é mais forte na região Nordeste.

- A falta de saneamento básico é um fator mais importante de pobreza na região Nordeste.

- Medidas para melhorar o saneamento básico na região Nordeste podem contribuir de forma mais significativa para a redução da pobreza.


A região Nordeste apresenta uma taxa de pobreza mais alta do que a região Sudeste. Além disso, a região Nordeste apresenta uma maior desigualdade social. Esses fatores contribuem para que a relação entre a quantidade de pessoas pobres e a proporção de domicílios sem saneamento básico seja mais forte na região Nordeste.


Os gráficos da região Nordeste mostram que, em todos os estados, a proporção de domicílios sem saneamento básico é maior nos municípios com maior número de pessoas pobres. Essa relação é mais forte nos estados do Maranhão, Piauí e Ceará, que apresentam as maiores taxas de pobreza da região.

Em conclusão, a falta de saneamento básico é um importante fator de pobreza na região Nordeste do Brasil. Medidas para melhorar o saneamento básico na região podem contribuir de forma mais significativa para a redução da pobreza.

Aqui estão algumas recomendações para melhorar o saneamento básico na região Nordeste:

- Investir na construção de redes de esgoto e tratamento de água.

- Fornecer incentivos financeiros para a construção de banheiros adequados.

- Promover campanhas de conscientização sobre a importância do saneamento básico.
Além dessas medidas, é importante também investir em educação e saúde para melhorar a qualidade de vida das pessoas na região Nordeste.
"""


dados_ac = regiao_norte['Acre (AC)']
dados_ap = regiao_norte['Amapá (AP)']
dados_am = regiao_norte['Amazonas (AM)']
dados_pa = regiao_norte['Pará (PA)']
dados_ro = regiao_norte['Rondônia (RO)']
dados_rr = regiao_norte['Roraima (RR)']
dados_to = regiao_norte['Tocantins (TO)']


dados_ac['contr_S3'] = pd.to_numeric(dados_ac['contr_S3'], errors='coerce')
dados_ap['contr_S3'] = pd.to_numeric(dados_ap['contr_S3'], errors='coerce')
dados_am['contr_S3'] = pd.to_numeric(dados_am['contr_S3'], errors='coerce')
dados_pa['contr_S3'] = pd.to_numeric(dados_pa['contr_S3'], errors='coerce')
dados_ro['contr_S3'] = pd.to_numeric(dados_ro['contr_S3'], errors='coerce')
dados_rr['contr_S3'] = pd.to_numeric(dados_rr['contr_S3'], errors='coerce')
dados_to['contr_S3'] = pd.to_numeric(dados_to['contr_S3'], errors='coerce')


dados_ac = dados_ac[pd.to_numeric(dados_ac['contr_S3'], errors='coerce').notnull()]
dados_ac = dados_ac[pd.to_numeric(dados_ac['qtd_pes_pobres'], errors='coerce').notnull()]

dados_ap = dados_ap[pd.to_numeric(dados_ap['contr_S3'], errors='coerce').notnull()]
dados_ap = dados_ap[pd.to_numeric(dados_ap['qtd_pes_pobres'], errors='coerce').notnull()]

dados_am = dados_am[pd.to_numeric(dados_am['contr_S3'], errors='coerce').notnull()]
dados_am = dados_am[pd.to_numeric(dados_am['qtd_pes_pobres'], errors='coerce').notnull()]

dados_pa = dados_pa[pd.to_numeric(dados_pa['contr_S3'], errors='coerce').notnull()]
dados_pa = dados_pa[pd.to_numeric(dados_pa['qtd_pes_pobres'], errors='coerce').notnull()]

dados_ro = dados_ro[pd.to_numeric(dados_ro['contr_S3'], errors='coerce').notnull()]
dados_ro = dados_ro[pd.to_numeric(dados_ro['qtd_pes_pobres'], errors='coerce').notnull()]

dados_rr = dados_rr[pd.to_numeric(dados_rr['contr_S3'], errors='coerce').notnull()]
dados_rr = dados_rr[pd.to_numeric(dados_rr['qtd_pes_pobres'], errors='coerce').notnull()]

dados_to = dados_to[pd.to_numeric(dados_to['contr_S3'], errors='coerce').notnull()]
dados_to = dados_to[pd.to_numeric(dados_to['qtd_pes_pobres'], errors='coerce').notnull()]


plt.figure(figsize=(14, 8))


plt.subplot(331)
plt.scatter(dados_ac['contr_S3'], dados_ac['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Acre (AC)')


plt.subplot(332)
plt.scatter(dados_ap['contr_S3'], dados_ap['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Amapá (AP)')


plt.subplot(333)
plt.scatter(dados_am['contr_S3'], dados_am['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Amazonas (AM)')


plt.subplot(334)
plt.scatter(dados_pa['contr_S3'], dados_pa['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Pará (PA)')


plt.subplot(335)
plt.scatter(dados_ro['contr_S3'], dados_ro['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Rondônia (RO)')


plt.subplot(336)
plt.scatter(dados_rr['contr_S3'], dados_rr['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Roraima (RR)')


plt.subplot(337)
plt.scatter(dados_to['contr_S3'], dados_to['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Tocantins (TO)')


plt.tight_layout()


plt.show()



regioes = {
    "Sul": regiao_sul,
}


dados_pr = regioes["Sul"]["Paraná (PR)"]
dados_sc = regioes["Sul"]["Santa Catarina (SC)"]
dados_rs = regioes["Sul"]["Rio Grande do Sul (RS)"]


dados_pr['contr_S3'] = pd.to_numeric(dados_pr['contr_S3'], errors='coerce') / 6.25
dados_sc['contr_S3'] = pd.to_numeric(dados_sc['contr_S3'], errors='coerce') / 6.25
dados_rs['contr_S3'] = pd.to_numeric(dados_rs['contr_S3'], errors='coerce') / 6.25


dados_pr = dados_pr[pd.to_numeric(dados_pr['contr_S3'], errors='coerce').notnull()]
dados_pr = dados_pr[pd.to_numeric(dados_pr['qtd_pes_pobres'], errors='coerce').notnull()]

dados_sc = dados_sc[pd.to_numeric(dados_sc['contr_S3'], errors='coerce').notnull()]
dados_sc = dados_sc[pd.to_numeric(dados_sc['qtd_pes_pobres'], errors='coerce').notnull()]

dados_rs = dados_rs[pd.to_numeric(dados_rs['contr_S3'], errors='coerce').notnull()]
dados_rs = dados_rs[pd.to_numeric(dados_rs['qtd_pes_pobres'], errors='coerce').notnull()]


plt.figure(figsize=(14, 8))


plt.subplot(331)
plt.scatter(dados_pr['contr_S3'], dados_pr['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Paraná (PR)')


plt.subplot(332)
plt.scatter(dados_sc['contr_S3'], dados_sc['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Santa Catarina (SC)')


plt.subplot(333)
plt.scatter(dados_rs['contr_S3'], dados_rs['qtd_pes_pobres'], s=100, alpha=0.5)
plt.xlabel('contr_S3 (com peso)')
plt.ylabel('qtd_pes_pobres')
plt.title('Rio Grande do Sul (RS)')


plt.tight_layout()


plt.show()



regioes = {
    "Centro-Oeste": regiao_centro_oeste,
}

estados = ["Goiás (GO)", "Mato Grosso (MT)", "Mato Grosso do Sul (MS)"]


plt.figure(figsize=(14, 8))
for i, estado in enumerate(estados, start=1):
    dados_estado = regioes["Centro-Oeste"][estado]

    
    dados_estado['contr_S3'] = pd.to_numeric(dados_estado['contr_S3'], errors='coerce') / 6.25

    
    dados_estado = dados_estado[pd.to_numeric(dados_estado['contr_S3'], errors='coerce').notnull()]
    dados_estado = dados_estado[pd.to_numeric(dados_estado['qtd_pes_pobres'], errors='coerce').notnull()]

    
    plt.subplot(3, 3, i)
    plt.scatter(dados_estado['contr_S3'], dados_estado['qtd_pes_pobres'], s=100, alpha=0.5)
    plt.xlabel('contr_S3 (com peso)')
    plt.ylabel('qtd_pes_pobres')
    plt.title(estado)


plt.tight_layout()


plt.show()


regiao_nordeste = regioes["Nordeste"]


dados_ma = regiao_nordeste["Maranhão (MA)"]
dados_pi = regiao_nordeste["Piauí (PI)"]
dados_ce = regiao_nordeste["Ceará (CE)"]
dados_rn = regiao_nordeste["Rio Grande do Norte (RN)"]
dados_pb = regiao_nordeste["Paraíba (PB)"]
dados_pe = regiao_nordeste["Pernambuco (PE)"]
dados_al = regiao_nordeste["Alagoas (AL)"]
dados_se = regiao_nordeste["Sergipe (SE)"]
dados_ba = regiao_nordeste["Bahia (BA)"]


dados_nordeste = pd.concat([dados_ma, dados_pi, dados_ce, dados_rn, dados_pb, dados_pe, dados_al, dados_se, dados_ba], axis=0)


dados_nordeste['contr_T1'] = pd.to_numeric(dados_nordeste['contr_T1'], errors='coerce')
dados_nordeste['contr_E1'] = pd.to_numeric(dados_nordeste['contr_E1'], errors='coerce')


dados_nordeste['contr_T1'].fillna(0, inplace=True)
dados_nordeste['contr_E1'].fillna(0, inplace=True)


peso_contr_T1 = 8.33
peso_contr_E1 = 8.33


dados_nordeste['contr_T1'] = dados_nordeste['contr_T1'] / peso_contr_T1
dados_nordeste['contr_E1'] = dados_nordeste['contr_E1'] / peso_contr_E1


coef_correlacao = dados_nordeste['contr_T1'].corr(dados_nordeste['contr_E1'])

print(f'Coeficiente de Correlação entre contr_T1 e contr_E1 na Região Nordeste: {coef_correlacao}')

from scipy.stats import pearsonr


regiao_nordeste = regioes["Nordeste"]


dados_ma = regiao_nordeste["Maranhão (MA)"]
dados_pi = regiao_nordeste["Piauí (PI)"]
dados_ce = regiao_nordeste["Ceará (CE)"]
dados_rn = regiao_nordeste["Rio Grande do Norte (RN)"]
dados_pb = regiao_nordeste["Paraíba (PB)"]
dados_pe = regiao_nordeste["Pernambuco (PE)"]
dados_al = regiao_nordeste["Alagoas (AL)"]
dados_se = regiao_nordeste["Sergipe (SE)"]
dados_ba = regiao_nordeste["Bahia (BA)"]


dados_nordeste = pd.concat([dados_ma, dados_pi, dados_ce, dados_rn, dados_pb, dados_pe, dados_al, dados_se, dados_ba], axis=0)


dados_nordeste['contr_S1'] = pd.to_numeric(dados_nordeste['contr_S1'], errors='coerce')
dados_nordeste['contr_S3'] = pd.to_numeric(dados_nordeste['contr_S3'], errors='coerce')


dados_nordeste['contr_S1'].fillna(0, inplace=True)
dados_nordeste['contr_S3'].fillna(0, inplace=True)


dados_nordeste['contr_S1'] = dados_nordeste['contr_S1'] * 6.25
dados_nordeste['contr_S3'] = dados_nordeste['contr_S3'] * 6.25


correlation, _ = pearsonr(dados_nordeste['contr_S1'], dados_nordeste['contr_S3'])


plt.figure(figsize=(8, 6))
plt.scatter(dados_nordeste['contr_S1'], dados_nordeste['contr_S3'], s=100, alpha=0.5)


plt.xlabel('contr_S1')
plt.ylabel('contr_S3')
plt.title(f'Correlação entre contr_S1 e contr_S3 na Região Nordeste (Correlação: {correlation:.2f})')
plt.grid(True)


plt.show()


print(f'Correlação entre contr_S1 e contr_S3 na Região Nordeste: {correlation:.2f}')


seu_dataframe_nordeste = pd.concat(regiao_nordeste)


seu_dataframe_nordeste['contr_E3'] = pd.to_numeric(seu_dataframe_nordeste['contr_E3'], errors='coerce')


seu_dataframe_nordeste.dropna(subset=['contr_E3'], inplace=True)


correlacao = seu_dataframe_nordeste['contr_E3'].corr(seu_dataframe_nordeste['qtd_pes_pobres'])


print(f"Correlação entre 'contr_E3' e 'qtd_pes_pobres' na Região Nordeste: {correlacao}")

seu_dataframe_nordeste['qtd_pes_pob_vul'] = pd.to_numeric(seu_dataframe_nordeste['qtd_pes_pob_vul'], errors='coerce')
seu_dataframe_nordeste['qtd_pes_T2'] = pd.to_numeric(seu_dataframe_nordeste['qtd_pes_T2'], errors='coerce')
correlacao = seu_dataframe_nordeste['qtd_pes_pob_vul'].corr(seu_dataframe_nordeste['qtd_pes_T2'])

print(f'Correlação entre "qtd_pes_pob_vul" e "qtd_pes_T2" na Região Nordeste: {correlacao}')



x = seu_dataframe_nordeste['qtd_pes_pob_vul']
y = seu_dataframe_nordeste['qtd_pes_T2']


plt.figure(figsize=(10, 6))
plt.scatter(x, y, s=100, alpha=0.7, color='blue')


plt.xlabel('qtd_pes_pob_vul')
plt.ylabel('qtd_pes_T2')
plt.title('Gráfico de Dispersão: qtd_pes_pob_vul vs. qtd_pes_T2 na Região Nordeste')
plt.grid(True)


plt.show()






qtd_pes_pob_vul = seu_dataframe_nordeste['qtd_pes_pob_vul']
qtd_pes_T2 = seu_dataframe_nordeste['qtd_pes_T2']


largura_barra = 0.35


indices = np.arange(len(municipios))


fig, ax = plt.subplots(figsize=(12, 6))
bar1 = ax.bar(indices, qtd_pes_pob_vul, largura_barra, label='qtd_pes_pob_vul')
bar2 = ax.bar(indices + largura_barra, qtd_pes_T2, largura_barra, label='qtd_pes_T2')


ax.set_xlabel('Municípios')
ax.set_ylabel('Valores')
ax.set_title('Comparação de qtd_pes_pob_vul e qtd_pes_T2 na Região Nordeste')
ax.set_xticks(indices + largura_barra / 2)
ax.set_xticklabels(municipios, rotation=90)
ax.legend()


plt.tight_layout()
plt.show()







dados_norte = pd.concat([dados_ac, dados_am, dados_ro, dados_rr, dados_ap, dados_pa, dados_to], axis=0)


dados_norte['contr_P4'] = pd.to_numeric(dados_norte['contr_P4'], errors='coerce')


dados_norte.dropna(subset=['contr_P4'], inplace=True)




novo_dataframe = dados_norte[['contr_P4']].div(8.33)


media = novo_dataframe.mean()
mediana = novo_dataframe.median()
quartis = novo_dataframe.describe()


print(f'Média: {media}')
print(f'Mediana: {mediana}')
print('Quartis:')
print(quartis)


novo_dataframe.plot(kind='hist', legend=False)
plt.title('Distribuição de contr_P4/8.33 na Região Norte')
plt.xlabel('Valores de contr_P4/8.33')
plt.ylabel('Frequência')
plt.show()




dados_sul = pd.concat([dados_pr, dados_sc, dados_rs], axis=0)


dados_sul['contr_P4'] = pd.to_numeric(dados_sul['contr_P4'], errors='coerce')


dados_sul.dropna(subset=['contr_P4'], inplace=True)




novo_dataframe = dados_sul[['contr_P4']].div(8.33)


media = novo_dataframe.mean()
mediana = novo_dataframe.median()
quartis = novo_dataframe.describe()


print(f'Média: {media}')
print(f'Mediana: {mediana}')
print('Quartis:')
print(quartis)


novo_dataframe.plot(kind='hist', legend=False)
plt.title('Distribuição de contr_P4/8.33 na Região Sul')
plt.xlabel('Valores de contr_P4/8.33')
plt.ylabel('Frequência')
plt.show()


dados_sul['qtd_pessoas'] = pd.to_numeric(dados_sul['qtd_pessoas'], errors='coerce')
dados_sul['contr_P4'] = pd.to_numeric(dados_sul['contr_P4'], errors='coerce')


plt.figure(figsize=(10, 6))
plt.scatter(dados_sul['contr_P4'], dados_sul['qtd_pessoas'], alpha=0.5)
plt.xlabel('contr_P4/8.33')
plt.ylabel('qtd_pessoas')
plt.title('Gráfico de Dispersão: qtd_pessoas em relação a contr_P4/8.33 na Região Sul')
plt.grid(True)


plt.show()


dados_ms = regiao_centro_oeste["Mato Grosso do Sul (MS)"]
dados_mt = regiao_centro_oeste["Mato Grosso (MT)"]
dados_go = regiao_centro_oeste["Goiás (GO)"]
dados_df = regiao_centro_oeste["Distrito Federal (DF)"]


def converter_para_float(valor):
    try:
        return float(valor)
    except (ValueError, TypeError):
        return 0.0  


dados_estados = [
    [converter_para_float(valor) for valor in dados_ms['contr_E3']],
    [converter_para_float(valor) for valor in dados_mt['contr_E3']],
    [converter_para_float(valor) for valor in dados_go['contr_E3']],
    [converter_para_float(valor) for valor in dados_df['contr_E3']]
]


taxa_dispersao_contr_E3 = [round(statistics.stdev(dados), 2) for dados in dados_estados]


estados = ['Mato Grosso do Sul', 'Mato Grosso', 'Goiás', 'Distrito Federal']

plt.bar(estados, taxa_dispersao_contr_E3)
plt.xlabel('Estado')
plt.ylabel('Taxa de Dispersão (Desvio Padrão) de contr_E3')
plt.title('Taxa de Dispersão da variável contr_E3 nos estados da Região Centro-Oeste')


plt.xticks(rotation=15)
plt.show()

"""https://we.tl/t-erV07qh8YU"""


dados_branco_pardo = df[(df['raca'] == 1) | (df['raca'] == 4)]


print(dados_branco_pardo)




dados_branco['intensidade'] = pd.to_numeric(dados_branco['intensidade'], errors='coerce')
dados_pardo['intensidade'] = pd.to_numeric(dados_pardo['intensidade'], errors='coerce')


media_intensidade_branco = dados_branco['intensidade'].mean()
media_intensidade_pardo = dados_pardo['intensidade'].mean()

print("Média de Intensidade de Pobreza para o Grupo Branco:", media_intensidade_branco)
print("Média de Intensidade de Pobreza para o Grupo Pardo:", media_intensidade_pardo)




dados_branco['incidencia'] = pd.to_numeric(dados_branco['incidencia'], errors='coerce')
dados_pardo['incidencia'] = pd.to_numeric(dados_pardo['incidencia'], errors='coerce')


media_incidencia_branco = dados_branco['incidencia'].mean()
media_incidencia_pardo = dados_pardo['incidencia'].mean()

print("Média de Incidência de Pobreza para o Grupo Branco:", media_incidencia_branco)
print("Média de Incidência de Pobreza para o Grupo Pardo:", media_incidencia_pardo)




dados_branco['incidencia'] = pd.to_numeric(dados_branco['incidencia'], errors='coerce')
dados_pardo['incidencia'] = pd.to_numeric(dados_pardo['incidencia'], errors='coerce')
dados_preto['incidencia'] = pd.to_numeric(dados_negro['incidencia'], errors='coerce')
dados_amarelo['incidencia'] = pd.to_numeric(dados_amarelo['incidencia'], errors='coerce')
dados_indigena['incidencia'] = pd.to_numeric(dados_indigena['incidencia'], errors='coerce')


media_incidencia_branco = dados_branco['incidencia'].mean()
media_incidencia_pardo = dados_pardo['incidencia'].mean()
media_incidencia_negro = dados_preto['incidencia'].mean()
media_incidencia_amarelo = dados_amarelo['incidencia'].mean()
media_incidencia_indigena = dados_indigena['incidencia'].mean()

print("Média de Incidência de Pobreza para o Grupo Branco:", media_incidencia_branco)
print("Média de Incidência de Pobreza para o Grupo Pardo:", media_incidencia_pardo)
print("Média de Incidência de Pobreza para o Grupo Negro:", media_incidencia_negro)
print("Média de Incidência de Pobreza para o Grupo Amarelo:", media_incidencia_amarelo)
print("Média de Incidência de Pobreza para o Grupo Indígena:", media_incidencia_indigena)





data = {
    'Grupo': ['Branco', 'Pardo'],
    'Soma de qtd_pessoas': [
        dados_branco['qtd_pessoas'].sum(),
        dados_pardo['qtd_pessoas'].sum()
    ]
}

df = pd.DataFrame(data)


plt.figure(figsize=(8, 6))
plt.bar(df['Grupo'], df['Soma de qtd_pessoas'], color=['blue', 'orange'])
plt.xlabel('Grupo Racial')
plt.ylabel('Soma de qtd_pessoas')
plt.title('Soma de qtd_pessoas por Grupo Racial (Branco vs. Pardo)')
plt.show()





data = {
    'Grupo': ['Branco', 'Pardo'],
    'Soma de qtd_pessoas': [dados_branco['qtd_pessoas'].sum(), dados_pardo['qtd_pessoas'].sum()],
    'Média de Incidência': [dados_branco['incidencia'].mean(), dados_pardo['incidencia'].mean()]
}

df = pd.DataFrame(data)


fig, ax1 = plt.subplots()


color = 'tab:blue'
ax1.set_xlabel('Grupo Racial')
ax1.set_ylabel('Soma de qtd_pessoas', color=color)
ax1.bar(df['Grupo'], df['Soma de qtd_pessoas'], color=color)
ax1.tick_params(axis='y', labelcolor=color)


ax2 = ax1.twinx()
color = 'tab:red'
ax2.set_ylabel('Média de Incidência', color=color)
ax2.plot(df['Grupo'], df['Média de Incidência'], marker='o', color=color, linestyle='-', linewidth=2, markersize=8)
ax2.tick_params(axis='y', labelcolor=color)


plt.title('Soma de qtd_pessoas e Média de Incidência por Grupo Racial')
plt.show()


regioes = {
    "São Paulo (SP)": dados_sp,
    "Rio de Janeiro (RJ)": dados_rj,
    "Minas Gerais (MG)": dados_mg,
    "Espírito Santo (ES)": dados_es,
}


variaveis = ["qtd_pes_E1", "qtd_pes_E2", "qtd_pes_E3", "qtd_pes_S1", "qtd_pes_S2", "qtd_pes_S3",
             "qtd_pes_S4", "qtd_pes_T1", "qtd_pes_T2", "qtd_pes_T3", "qtd_pes_P1", "qtd_pes_P2",
             "qtd_pes_P3", "qtd_pes_P4"]

medias_por_estado = {}


for estado, df_estado in regioes.items():
    medias_estado = {}
    for variavel in variaveis:
        valores = pd.to_numeric(df_estado.iloc[1:][variavel], errors='coerce')
        
        media1 = valores.mean()
        medias_estado[variavel] = media1
    medias_por_estado[estado] = medias_estado


df_medias = pd.DataFrame(medias_por_estado)
df_medias1 = pd.DataFrame(medias_por_estado).sum();

df_medias = df_medias.T


print(df_medias)

dados_rj.describe




regioes = {
    "São Paulo (SP)": dados_sp,
    "Rio de Janeiro (RJ)": dados_rj,
    "Minas Gerais (MG)": dados_mg,
    "Espírito Santo (ES)": dados_es,
}


variaveis = ["IPM"]


medias_por_estado = {}


for estado, df_estado in regioes.items():
    medias_estado = {}
    for variavel in variaveis:
        valores = pd.to_numeric(df_estado[variavel], errors='coerce')
        
        media = valores.mean()
        medias_estado[variavel] = media
    medias_por_estado[estado] = medias_estado

df_medias = pd.DataFrame(medias_por_estado)


medias_sudeste = {}
for variavel in variaveis:
    media_sudeste = df_medias[variavel].mean()
    medias_sudeste[variavel] = media_sudeste


df_medias_sudeste = pd.DataFrame(medias_sudeste, index=["Sudeste"])


df_medias_sudeste = df_medias_sudeste.T


print(df_medias)
print("\nMédias da Região Sudeste:")
print(df_medias_sudeste)


regioes = {
    "São Paulo (SP)": dados_sp,
    "Rio de Janeiro (RJ)": dados_rj,
    "Minas Gerais (MG)": dados_mg,
    "Espírito Santo (ES)": dados_es,
}


for estado, df_estado in regioes.items():
    coluna_ipm = df_estado["IPM"]
    print(f"Coluna IPM do estado {estado}:\n{coluna_ipm.mean()}\n")


regiao_nordeste = {
    "Maranhão (MA)": dados_ma,
    "Piauí (PI)": dados_pi,
    "Ceará (CE)": dados_ce,
    "Rio Grande do Norte (RN)": dados_rn,
    "Paraíba (PB)": dados_pb,
    "Pernambuco (PE)": dados_pe,
    "Alagoas (AL)": dados_al,
    "Sergipe (SE)": dados_se,
    "Bahia (BA)": dados_ba
}


for estado, df_estado in regiao_nordeste.items():
    coluna_ipm = df_estado.iloc[1:]["IPM"]
    print(f"Coluna IPM do estado {estado} - Média: {coluna_ipm.mean()}\n")




regiao_nordeste = {
    "Maranhão (MA)": dados_ma,
    "Piauí (PI)": dados_pi,
    "Ceará (CE)": dados_ce,
    "Rio Grande do Norte (RN)": dados_rn,
    "Paraíba (PB)": dados_pb,
    "Pernambuco (PE)": dados_pe,
    "Alagoas (AL)": dados_al,
    "Sergipe (SE)": dados_se,
    "Bahia (BA)": dados_ba
}


soma_ipm_raca_1 = 0


for estado, df_estado in regiao_nordeste.items():
    
    df_raca_1 = df_estado[df_estado['raca'] == 1]

    
    soma_ipm_estado = df_raca_1.iloc[1:]['IPM'].mean()

    
    soma_ipm_raca_1 += soma_ipm_estado

    
    print(f"Soma do IPM para raça = 1 em {estado}: {soma_ipm_estado}")


print(f"Soma total do IPM para raça = 1 na Região Nordeste: {soma_ipm_raca_1/9}")




regiao_nordeste = {
    "Maranhão (MA)": dados_ma,
    "Piauí (PI)": dados_pi,
    "Ceará (CE)": dados_ce,
    "Rio Grande do Norte (RN)": dados_rn,
    "Paraíba (PB)": dados_pb,
    "Pernambuco (PE)": dados_pe,
    "Alagoas (AL)": dados_al,
    "Sergipe (SE)": dados_se,
    "Bahia (BA)": dados_ba
}


soma_ipm_raca_3 = 0


for estado, df_estado in regiao_nordeste.items():
    
    df_raca_3 = df_estado[df_estado['raca'] == 3]

    
    soma_ipm_estado = df_raca_3.iloc[1:]['IPM'].mean()

    
    soma_ipm_raca_3 += soma_ipm_estado

    
    print(f"Média do IPM para raça = 3 em {estado}: {soma_ipm_estado/100}")


print(f"Média do IPM para raça = 3 na Região Nordeste: {(soma_ipm_raca_3/9)/100}")




regiao_nordeste = {
    "Maranhão (MA)": dados_ma,
    "Piauí (PI)": dados_pi,
    "Ceará (CE)": dados_ce,
    "Rio Grande do Norte (RN)": dados_rn,
    "Paraíba (PB)": dados_pb,
    "Pernambuco (PE)": dados_pe,
    "Alagoas (AL)": dados_al,
    "Sergipe (SE)": dados_se,
    "Bahia (BA)": dados_ba
}


racas = {
    1: "Branco",
    2: "Preto",
    3: "Amarelo",
    4: "Pardo",
    5: "Indígena"
}


somas_ipm_por_raca = {raca: 0 for raca in racas}


for estado, df_estado in regiao_nordeste.items():
    
    for raca, nome_raca in racas.items():
        
        df_raca = df_estado[df_estado['raca'] == raca]

        
        soma_ipm_raca = df_raca.iloc[1:]['IPM'].mean()

        
        somas_ipm_por_raca[raca] += soma_ipm_raca

        
        print(f"Média do IPM para {nome_raca} em {estado}: {soma_ipm_raca}\n\n")


for raca, soma in somas_ipm_por_raca.items():
    print(f"Média total do IPM para {racas[raca]}: {(soma/9)/100}")




regioes = {
    "São Paulo (SP)": dados_sp,
    "Rio de Janeiro (RJ)": dados_rj,
    "Minas Gerais (MG)": dados_mg,
    "Espírito Santo (ES)": dados_es,
}


racas = {
    1: "Branco",
    2: "Preto",
    3: "Amarelo",
    4: "Pardo",
    5: "Indígena"
}


somas_ipm_por_raca = {raca: 0 for raca in racas}


for estado, df_estado in regiao_sudeste.items():
    
    for raca, nome_raca in racas.items():
        
        df_raca = df_estado[df_estado['raca'] == raca]

        
        soma_ipm_raca = df_raca.iloc[1:]['IPM'].mean()

        
        somas_ipm_por_raca[raca] += soma_ipm_raca

        
        print(f"Média do IPM para {nome_raca} em {estado}: {soma_ipm_raca}\n\n")


for raca, soma in somas_ipm_por_raca.items():
    print(f"Média total do IPM para {racas[raca]}: {(soma/4)/100}") 




racas = ["Branco", "Negro", "Amarelo", "Pardo", "Indígena"]
media_sudeste = [0.08250815799578282, 0.11311820799623912, 0.08136842314779064, 0.10915008617761979, 0.07309513396881558]
media_nordeste = [0.20426537824176283, 0.2397684378487159, 0.22292973321077258, 0.23790284856799823, 0.1864549658077462]


x = range(len(racas))


plt.bar(x, media_sudeste, width=0.4, label='Sudeste', color='royalblue')
plt.bar(x, media_nordeste, width=0.4, label='Nordeste', color='lightcoral', bottom=media_sudeste)


plt.xlabel('Raça')
plt.ylabel('Média do IPM')
plt.title('Média do IPM por Raça nas Regiões Sudeste e Nordeste (2010)')
plt.xticks(x, racas)
plt.legend()


plt.show()




racas = ["Branco", "Negro", "Amarelo", "Pardo", "Indígena"]
media_sudeste = [0.08250815799578282, 0.11311820799623912, 0.08136842314779064, 0.10915008617761979, 0.07309513396881558]
media_nordeste = [0.20426537824176283, 0.2397684378487159, 0.22292973321077258, 0.23790284856799823, 0.1864549658077462]

x = range(len(racas))


plt.bar(x, media_sudeste, width=0.4, label='Sudeste', color='royalblue')
plt.bar(x, media_nordeste, width=0.4, label='Nordeste', color='lightcoral', bottom=media_sudeste)


plt.axhline(y=0.25, color='orange', linestyle='--', label='IPM-A')
plt.axhline(y=0.33, color='red', linestyle='--', label='IPM-S')


plt.xlabel('Raças')
plt.ylabel('Média do IPM (onde 0= sem pobreza, 1= extrema pobreza)')
plt.title('Média do IPM por Raças nas Regiões Sudeste e Nordeste (2010)')
plt.xticks(x, racas)
plt.yticks([0, 0.25, 0.33, 0.5, 0.75, 1.0], ['0.00', '0.25', '0.33', '0.50', '0.75', '1.00'])
plt.legend()


plt.show()


regiao_nordeste = {
    "Maranhão (MA)": dados_ma,
    "Piauí (PI)": dados_pi,
    "Ceará (CE)": dados_ce,
    "Rio Grande do Norte (RN)": dados_rn,
    "Paraíba (PB)": dados_pb,
    "Pernambuco (PE)": dados_pe,
    "Alagoas (AL)": dados_al,
    "Sergipe (SE)": dados_se,
    "Bahia (BA)": dados_ba
}


medias_por_estado_nordeste = {}


for estado, df_estado in regiao_nordeste.items():
    medias_estado = {}
    for variavel in variaveis:
      valores = pd.to_numeric(df_estado.iloc[1:][variavel], errors='coerce')
        
media = valores.mean()
medias_estado[variavel] = media
medias_por_estado_nordeste[estado] = medias_estado



df_medias_nordeste = pd.DataFrame(medias_por_estado_nordeste)


df_medias_nordeste = df_medias_nordeste.T


print(df_medias_nordeste)

regiao_sul = {
    "Paraná (PR)": dados_pr,
    "Santa Catarina (SC)": dados_sc,
    "Rio Grande do Sul (RS)": dados_rs,
}


racas = {
    1: "Branco",
    2: "Preto",
    3: "Amarelo",
    4: "Pardo",
    5: "Indígena"
}


somas_ipm_por_raca = {raca: 0 for raca in racas}


for estado, df_estado in regiao_sul.items():
    
    for raca, nome_raca in racas.items():
        
        df_raca = df_estado[df_estado['raca'] == raca]

        
        soma_ipm_raca = df_raca.iloc[1:]['IPM'].mean()

        
        somas_ipm_por_raca[raca] += soma_ipm_raca

        
        print(f"Média do IPM para {nome_raca} em {estado}: {soma_ipm_raca}")


for raca, soma in somas_ipm_por_raca.items():
    print(f"Média total do IPM para {racas[raca]}: {soma/len(regiao_sul)/100}") 


regiao_norte = {
    "Acre (AC)": dados_ac,
    "Amapá (AP)": dados_ap,
    "Amazonas (AM)": dados_am,
    "Pará (PA)": dados_pa,
    "Rondônia (RO)": dados_ro,
    "Roraima (RR)": dados_rr,
    "Tocantins (TO)": dados_to,
}


racas = {
    1: "Brancos",
    2: "Negros",
    3: "Amarelos",
    4: "Pardos",
    5: "Indígenas"
}


somas_ipm_por_raca = {raca: 0 for raca in racas}


for estado, df_estado in regiao_norte.items():
    
    for raca, nome_raca in racas.items():
        
        df_raca = df_estado[df_estado['raca'] == raca]

        
        media_ipm_raca = df_raca.iloc[1:]['IPM'].mean()

        
        somas_ipm_por_raca[raca] += media_ipm_raca

        
        print(f"Média do IPM para {nome_raca} em {estado}: {media_ipm_raca}")


for raca, soma in somas_ipm_por_raca.items():
    media_total = soma / len(regiao_norte)/100
    print(f"Média total do IPM para {racas[raca]} na Região Norte: {media_total}")


regiao_centro_oeste = {
    "Goiás (GO)": dados_go,
    "Mato Grosso (MT)": dados_mt,
    "Mato Grosso do Sul (MS)": dados_ms,
}


racas = {
    1: "Branco",
    2: "Preto",
    3: "Amarelo",
    4: "Pardo",
    5: "Indígena"
}


somas_ipm_por_raca = {raca: 0 for raca in racas}


for estado, df_estado in regiao_centro_oeste.items():
    
    for raca, nome_raca in racas.items():
        
        df_raca = df_estado[df_estado['raca'] == raca]

        
        media_ipm_raca = df_raca.iloc[1:]['IPM'].mean()

        
        somas_ipm_por_raca[raca] += media_ipm_raca

        
        print(f"Média do IPM para {nome_raca} em {estado}: {media_ipm_raca}")


for raca, soma in somas_ipm_por_raca.items():
    media_media = soma / len(regiao_centro_oeste)
    if not pd.isna(media_media):
        print(f"Média total do IPM para {racas[raca]} na Região Centro-Oeste: {media_media / 100}")  


regioes = {
    "Sudeste": {
        "São Paulo (SP)": dados_sp,
        "Rio de Janeiro (RJ)": dados_rj,
        "Minas Gerais (MG)": dados_mg,
        "Espírito Santo (ES)": dados_es,
    },
    "Nordeste": {
        "Maranhão (MA)": dados_ma,
        "Piauí (PI)": dados_pi,
        "Ceará (CE)": dados_ce,
        "Rio Grande do Norte (RN)": dados_rn,
        "Paraíba (PB)": dados_pb,
        "Pernambuco (PE)": dados_pe,
        "Alagoas (AL)": dados_al,
        "Sergipe (SE)": dados_se,
        "Bahia (BA)": dados_ba,
    },
    "Sul": {
        "Paraná (PR)": dados_pr,
        "Santa Catarina (SC)": dados_sc,
        "Rio Grande do Sul (RS)": dados_rs,
    },
    "Centro-Oeste": {
        "Goiás (GO)": dados_go,
        "Mato Grosso (MT)": dados_mt,
        "Mato Grosso do Sul (MS)": dados_ms,
    },
    "Norte": {
        "Rondônia (RO)": dados_ro,
        "Acre (AC)": dados_ac,
        "Amazonas (AM)": dados_am,
        "Roraima (RR)": dados_rr,
        "Pará (PA)": dados_pa,
        "Amapá (AP)": dados_ap,
        "Tocantins (TO)": dados_to,
    }
}


racas = {
    1: "Branco",
    2: "Preto",
    3: "Amarelo",
    4: "Pardo",
    5: "Indígena"
}


nome_da_coluna_de_raca = "raca"


medias_por_raca_e_regiao = {raca: {regiao: 0 for regiao in regioes} for raca in racas}



for regiao, estados in regioes.items():
    
    for estado, df_estado in estados.items():
        
        for raca, nome_raca in racas.items():
            
            df_raca = df_estado[df_estado['raca'] == raca]

            
            media_ipm_raca = df_raca.iloc[1:]['IPM'].mean()

            
            medias_por_raca_e_regiao[raca][regiao] += media_ipm_raca



for raca, medias_regiao in medias_por_raca_e_regiao.items():
    print(f"Médias do IPM para a raça {racas[raca]}:")
    for regiao, media in medias_regiao.items():
        media_regiao = media / len(regioes[regiao]) / 100  
        print(f"Média do IPM para {racas[raca]} na Região {regiao}: {media_regiao:.4f}")
    print("\n")


regiao_sul = {
       "Paraná (PR)": dados_pr,
        "Santa Catarina (SC)": dados_sc,
        "Rio Grande do Sul (RS)": dados_rs,
}


racas = {
    1: "Branco",
    2: "Preto",
    3: "Amarelo",
    4: "Pardo",
    5: "Indígena"
}


somas_ipm_por_raca = {raca: 0 for raca in racas}


for estado, df_estado in regiao_sul.items():
    
    for raca, nome_raca in racas.items():
        
        df_raca = df_estado[df_estado['raca'] == raca]

        
        media_ipm_raca = df_raca.iloc[1:]['IPM'].mean()

        
        somas_ipm_por_raca[raca] += media_ipm_raca

        
        print(f"Média do IPM para {nome_raca} em {estado}: {media_ipm_raca}")


for raca, soma in somas_ipm_por_raca.items():
    media_media = soma / len(regiao_centro_oeste)
    if not pd.isna(media_media):
        print(f"Média total do IPM para {racas[raca]} na Região Sul: {media_media / 100}")  


racas = ["Branco", "Negro", "Amarelo", "Pardo", "Indígena"]
media_sudeste = [0.0826, 0.1131, 0.0820, 0.1091, 0.0735]
media_nordeste = [0.1864, 0.2379, 0.2229, 0.2377, 0.1865]
media_sul = [0.1284, 0.1755, 0.1463, 0.1744, 0.1616]
media_norte = [0.2748, 0.3159, 0.2884, 0.3163, 0.3694]  


bar_width = 0.2


posicoes = range(len(racas))


plt.bar(posicoes, media_sudeste, bar_width, label='Sudeste', color='b', align='center')
plt.bar([p + bar_width for p in posicoes], media_nordeste, bar_width, label='Nordeste', color='g', align='center')
plt.bar([p + 2 * bar_width for p in posicoes], media_sul, bar_width, label='Sul', color='r', align='center')
plt.bar([p + 3 * bar_width for p in posicoes], media_norte, bar_width, label='Norte', color='y', align='center')


plt.xticks([p + 1.5 * bar_width for p in posicoes], racas)


plt.title('Média do IPM por Raça e Região')
plt.xlabel('Raça')
plt.ylabel('Média do IPM')


plt.legend()


plt.axhline(y=0.25, color='k', linestyle='--', label='IPM-A')
plt.axhline(y=0.33, color='r', linestyle='--', label='IPM-S')


plt.ylim(0, 0.5)


plt.show()


racas = ["Branco", "Negro", "Amarelo", "Pardo", "Indígena"]
media_sudeste = [0.0826, 0.1131, 0.0820, 0.1091, 0.0735]
media_nordeste = [0.1864, 0.2379, 0.2229, 0.2377, 0.1865]
media_sul = [0.1284, 0.1755, 0.1463, 0.1744, 0.1616]
media_norte = [0.2748, 0.3159, 0.2884, 0.3163, 0.3694]  
media_centro_oeste = [0.1264, 0.1589, 0.1141, 0.1613, 0.2101]  


bar_width = 0.15


posicoes = range(len(racas))


plt.bar(posicoes, media_sudeste, bar_width, label='Sudeste', color='b', align='center')
plt.bar([p + bar_width for p in posicoes], media_nordeste, bar_width, label='Nordeste', color='g', align='center')
plt.bar([p + 2 * bar_width for p in posicoes], media_sul, bar_width, label='Sul', color='r', align='center')
plt.bar([p + 3 * bar_width for p in posicoes], media_norte, bar_width, label='Norte', color='y', align='center')
plt.bar([p + 4 * bar_width for p in posicoes], media_centro_oeste, bar_width, label='Centro-Oeste', color='c', align='center')


plt.xticks([p + 2 * bar_width for p in posicoes], racas)


plt.title('Média do IPM por Raça e Região')
plt.xlabel('Raça')
plt.ylabel('Média do IPM')


plt.legend()


plt.axhline(y=0.25, color='k', linestyle='--', label='IPM-A')
plt.axhline(y=0.33, color='r', linestyle='--', label='IPM-S')


plt.ylim(0, 1)


plt.show()


regioes = [regiao_norte, regiao_nordeste, regiao_sudeste, regiao_sul, regiao_centro_oeste]


titulos = ['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste']


coluna_qtd_0a11 = 'qtd_0a11'
coluna_qtd_0a11_pobres = 'qtd_0a11_pobres'


for regiao, titulo in zip(regioes, titulos):
    for estado in regiao.keys():
        
        estado_dataframe = regiao[estado]
        if coluna_qtd_0a11 in estado_dataframe.columns and coluna_qtd_0a11_pobres in estado_dataframe.columns:
            
            qtd_0a11_sum = estado_dataframe.iloc[1:][coluna_qtd_0a11].sum()
            qtd_0a11_pobres_sum = estado_dataframe.iloc[1:][coluna_qtd_0a11_pobres].sum()

            
            labels = ['0-11 anos', '0-11 anos pobres']
            sizes = [qtd_0a11_sum, qtd_0a11_pobres_sum]
            plt.figure(figsize=(6, 6))
            plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
            plt.axis('equal')  
            plt.title(f'{titulo} - {estado}')
            plt.show()


regioes = [regiao_norte, regiao_nordeste, regiao_sudeste, regiao_sul, regiao_centro_oeste]


titulos = ['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste']


coluna_qtd_0a11 = 'qtd_0a11'
coluna_qtd_0a11_pob_vul = 'qtd_0a11_pob_vul'


for regiao, titulo in zip(regioes, titulos):
    for estado in regiao.keys():
        
        estado_dataframe = regiao[estado]
        if coluna_qtd_0a11 in estado_dataframe.columns and coluna_qtd_0a11_pob_vul in estado_dataframe.columns:
            
            qtd_0a11_sum = estado_dataframe.iloc[1:][coluna_qtd_0a11].sum()
            qtd_0a11_pob_vul_sum = estado_dataframe.iloc[1:][coluna_qtd_0a11_pob_vul].sum()

            
            labels = ['0-11 anos', '0-11 anos pobres ou vulneráveis']
            sizes = [qtd_0a11_sum, qtd_0a11_pob_vul_sum]
            plt.figure(figsize=(6, 6))
            plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
            plt.axis('equal')  
            plt.title(f'{titulo} - {estado}')
            plt.show()


regioes = [regiao_norte, regiao_nordeste, regiao_sudeste, regiao_sul, regiao_centro_oeste]


titulos = ['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste']


coluna_qtd_0a11 = 'qtd_0a11'
coluna_qtd_0a11_pob_vul = 'qtd_0a11_pob_vul'


for regiao, titulo in zip(regioes, titulos):
    for estado in regiao.keys():
        
        estado_dataframe = regiao[estado]
        if coluna_qtd_0a11 in estado_dataframe.columns and coluna_qtd_0a11_pob_vul in estado_dataframe.columns:
            
            estado_dataframe = estado_dataframe.iloc[1:]

            
            qtd_0a11_sum = estado_dataframe[coluna_qtd_0a11].sum()
            qtd_0a11_pob_vul_sum = estado_dataframe[coluna_qtd_0a11_pob_vul].sum()

            
            labels = ['0-11 anos', '0-11 anos pobres ou vulneráveis']
            sizes = [qtd_0a11_sum, qtd_0a11_pob_vul_sum]
            percentages = [qtd_0a11_sum / (qtd_0a11_sum + qtd_0a11_pob_vul_sum) * 100,
                           qtd_0a11_pob_vul_sum / (qtd_0a11_sum + qtd_0a11_pob_vul_sum) * 100]

            plt.figure(figsize=(6, 6))
            plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
            plt.axis('equal')  
            plt.title(f'{titulo} - {estado}')


            
            for i, label in enumerate(labels):
                print(f'{titulo} - {estado} - {label}: {percentages[i]:.1f}%')


from sklearn.linear_model import LinearRegression






X = dados_sp['qtd_0a11_pob_vul'].values.reshape(-1, 1)  
y = dados_sp['qtd_0a11_pob_vul']


modelo = LinearRegression()


modelo.fit(X, y)


previsoes = modelo.predict(X)


correlacao = regiao_norte['qtd_dom_E1'].corr(regiao_norte['qtd_0a11_pob_vul'])


plt.scatter(X, y, color='blue', label='Dados')
plt.plot(X, previsoes, color='red', linewidth=2, label='Regressão Linear')
plt.xlabel('qtd_dom_E1')
plt.ylabel('qtd_0a11_pob_vul')
plt.title(f'Correlação: {correlacao:.2f}')
plt.legend()
plt.show()

dados_sp.describe

dados_sp['qtd_0a11_vulneraveis']

